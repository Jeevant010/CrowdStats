'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('react');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/consts/index.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../store/state/nonce/nonce.cjs');
var projectSettings = require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../config/ApiEndpoint.cjs');
var user = require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../store/state/authMode/authMode.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../functions/compareChains/compareChains.cjs');
require('../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
var MockContext = require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/walletOptions/walletOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/OverlayCard/OverlayCard.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
var useAllowClose = require('./useAllowClose/useAllowClose.cjs');
require('qrcode');
require('formik');
require('../useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
var index = require('../../../context/FooterAnimationContext/index.cjs');
var isUserLinkingWallet = require('../../../shared/utils/functions/isUserLinkingWallet/isUserLinkingWallet.cjs');
var authViewLayoutChecks = require('../../constants/authViewLayoutChecks.cjs');
var useDynamicLayoutData = require('../useDynamicLayoutData/useDynamicLayoutData.cjs');
require('../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../context/OnrampContext/OnrampContext.cjs');
require('../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
require('../../../../index.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');

const useAuthLayoutChecks = () => {
    var _a;
    const { view } = ViewContext.useViewContext();
    const { customPrivacyPolicy, customTermsOfServices, privacyPolicyUrl, termsOfServiceUrl, isBridgeFlow, } = useInternalDynamicContext.useInternalDynamicContext();
    const { isFooterExpanded } = index.useFooterAnimationContext();
    const { mockedSDK } = MockContext.useMockContext();
    const { helpHeaderData } = useDynamicLayoutData.useDynamicLayoutData({
        view: view.type,
    });
    const user$1 = user.useUserCoalesced();
    const projectSettings$1 = projectSettings.useProjectSettings();
    const isLinkingWallet = isUserLinkingWallet.isUserLinkingWallet(user$1, view.type, mockedSDK);
    const displayBorderBelowHeader = !authViewLayoutChecks.viewsThatPreventBorderBelowHeader.includes(view.type) || isFooterExpanded;
    const isWalletListTypeView = authViewLayoutChecks.viewsWithWalletListType.includes(view.type);
    const showHelpContent = Boolean(helpHeaderData &&
        !authViewLayoutChecks.viewsThatHideHelpContent.includes(view.type) &&
        !isLinkingWallet);
    const showHeader = !authViewLayoutChecks.viewsThatHideHeader.includes(view.type);
    const showConnectedWalletProgress = isBridgeFlow && authViewLayoutChecks.viewsThatShowConnectedWalletProgress.includes(view.type);
    const showToSFooter = Boolean(!isLinkingWallet &&
        (view.type === 'wallet-list' ||
            view.type === 'wallet-connect-mobile-wallets-list' ||
            // Don't show empty footer during the login
            ((view.type === 'login-with-email-or-wallet' ||
                view.type === 'login-with-email-or-wallet-full-wallet-list' ||
                view.type === 'login-with-wallet-only' ||
                view.type === 'multi-wallet-wallet-list') &&
                (termsOfServiceUrl ||
                    privacyPolicyUrl ||
                    customPrivacyPolicy ||
                    customTermsOfServices))));
    const showDynamicFooter = Boolean((_a = projectSettings$1 === null || projectSettings$1 === void 0 ? void 0 : projectSettings$1.sdk) === null || _a === void 0 ? void 0 : _a.displayDynamicMessaging) &&
        authViewLayoutChecks.viewsThatShowDynamicFooter.includes(view.type);
    const showDefaultFooter = !showConnectedWalletProgress && !showDynamicFooter && !showToSFooter;
    const shouldHideDynamicFooterSeparator = showDynamicFooter && showToSFooter;
    const { allowsClosing, showCloseButton } = useAllowClose.useAllowClose();
    return {
        allowsClosing,
        displayBorderBelowHeader,
        isWalletListTypeView,
        shouldHideDynamicFooterSeparator,
        showCloseButton,
        showConnectedWalletProgress,
        showDefaultFooter,
        showDynamicFooter,
        showHeader,
        showHelpContent,
        showToSFooter,
    };
};

exports.useAuthLayoutChecks = useAuthLayoutChecks;
