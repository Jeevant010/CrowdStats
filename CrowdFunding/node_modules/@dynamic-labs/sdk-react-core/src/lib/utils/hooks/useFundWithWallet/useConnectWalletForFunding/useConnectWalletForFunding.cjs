'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var React = require('react');
var utils = require('@dynamic-labs/utils');
require('../../../../context/DynamicContext/DynamicContext.cjs');
require('../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../constants/colors.cjs');
require('../../../constants/values.cjs');
require('../../../../shared/consts/index.cjs');
var useDynamicEvents = require('../../events/useDynamicEvents/useDynamicEvents.cjs');
require('../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../../store/state/nonce/nonce.cjs');
require('../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../store/state/user/user.cjs');
require('../../../../locale/locale.cjs');
require('../../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
var UserWalletsContext = require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
var dynamicEvents = require('../../../../events/dynamicEvents.cjs');
require('../../../../store/state/authMode/authMode.cjs');
require('../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../functions/compareChains/compareChains.cjs');
require('../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../../context/ThemeContext/ThemeContext.cjs');
require('../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../context/LoadingContext/LoadingContext.cjs');
require('../../../../context/WalletContext/WalletContext.cjs');
require('../../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../../context/MockContext/MockContext.cjs');
require('../../../../views/CollectUserDataView/useFields.cjs');
require('../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
var walletOptions = require('../../../../store/state/walletOptions/walletOptions.cjs');
var useHandleWalletItem = require('../../useWalletItemActions/useHandleWalletItem/useHandleWalletItem.cjs');
require('react-i18next');
require('../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../components/Alert/Alert.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/Input/Input.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/OverlayCard/OverlayCard.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../useSubdomainCheck/useSubdomainCheck.cjs');
var index = require('../../../functions/walletFilters/index.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../store/state/sendBalances.cjs');
require('../../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../context/OnrampContext/OnrampContext.cjs');
var resolvePromiseRef = require('../../../functions/resolvePromiseRef/resolvePromiseRef.cjs');
var rejectPromiseRef = require('../../../functions/rejectPromiseRef/rejectPromiseRef.cjs');
var useWalletOptions = require('../../useWalletOptions/useWalletOptions.cjs');
var FilterWalletsForExternalFunding = require('../utils/FilterWalletsForExternalFunding.cjs');
require('../../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
require('../../../../../index.cjs');
require('../../../../store/state/tokenBalances.cjs');
require('../../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');

const useConnectWalletForFunding = () => {
    const { primaryWallet, setShowAuthFlow } = useInternalDynamicContext.useInternalDynamicContext();
    const { clearStackAndPush } = ViewContext.useViewContext();
    const userWallets = UserWalletsContext.useUserWallets();
    const initiatedByWidgetRef = React.useRef(false);
    const { walletOptions: walletOptions$1 } = useWalletOptions.useWalletOptions();
    const internalConnectionPromiseRef = React.useRef(null);
    const connectWalletPromiseRef = React.useRef(null);
    const handleWalletMethod = React.useCallback((props) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        // This is for phantom redirect: store the reason for this connection
        // so we don't lose the flow when redirected back
        const connectionType = {
            connectorConsumed: false,
            initiatedByWidget: initiatedByWidgetRef.current,
            type: 'external-wallet-funding',
        };
        utils.StorageService.setItem(utils.PHANTOM_REDIRECT_CONNECTION_TYPE_KEY, connectionType);
        const address = yield props.walletConnector.getAddress(props.getAddressOpts);
        if (!address) {
            rejectPromiseRef.rejectPromiseRef(internalConnectionPromiseRef, new utils.DynamicError('No wallet address found'));
            return;
        }
        resolvePromiseRef.resolvePromiseRef(internalConnectionPromiseRef, address);
    }), []);
    const { handleWalletItemClick } = useHandleWalletItem.useHandleWalletItem({
        allowAlreadyConnectedWallet: true,
        onConnectOnly: handleWalletMethod,
        onCustodialWallet: handleWalletMethod,
        onInstalledExtension: handleWalletMethod,
        onQrCodeConnect: handleWalletMethod,
    });
    useDynamicEvents.useInternalDynamicEvents('authFlowClose', () => {
        rejectPromiseRef.rejectPromiseRef(connectWalletPromiseRef, new utils.DynamicError('User cancelled'));
    });
    const getWalletAddress = React.useCallback((walletConnector) => {
        const walletOption = walletOptions$1.find(({ key }) => key === walletConnector.key);
        if (!walletOption)
            return Promise.reject(new utils.DynamicError(`Connect wallet for funding error: wallet option for ${walletConnector.key} not found`));
        internalConnectionPromiseRef.current = new utils.DeferredPromise();
        handleWalletItemClick(Object.assign(Object.assign({}, walletOption), { walletConnector }));
        return internalConnectionPromiseRef.current.promise;
    }, [handleWalletItemClick, walletOptions$1]);
    const hasWalletConnectWallet = userWallets.some((wallet) => wallet.connector.isWalletConnect);
    // WC does not allow multiple sessions, so we have 2 cases here:
    // 1. The user has a linked WalletConnect wallet.
    //    In this case, we should not do anything, and our logic will prevent other WCs from being
    //    selected for funding.
    // 2. The user does not have a WalletConnect wallet linked.
    //    In this case, we should reset the WC session â€” this is because they might have just
    //    previously connected another WC wallet for funding and that session could still be active.
    const resetWalletConnectSession = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (hasWalletConnectWallet)
            return;
        const walletOption = walletOptions.getWalletConnectorOptions().find(({ walletConnector }) => walletConnector.isWalletConnect);
        yield (walletOption === null || walletOption === void 0 ? void 0 : walletOption.walletConnector.endSession());
        yield (walletOption === null || walletOption === void 0 ? void 0 : walletOption.walletConnector.init());
    }), [hasWalletConnectWallet]);
    return React.useCallback((_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ initiatedByWidget }) {
        if (connectWalletPromiseRef.current) {
            return connectWalletPromiseRef.current.promise;
        }
        resetWalletConnectSession();
        connectWalletPromiseRef.current = new utils.DeferredPromise();
        clearStackAndPush('external-funding-wallet-list', {
            onSelectWallet: (_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ walletConnector }) {
                if (!connectWalletPromiseRef.current)
                    return;
                try {
                    initiatedByWidgetRef.current = initiatedByWidget;
                    const walletAddress = yield getWalletAddress(walletConnector);
                    if (!walletAddress) {
                        rejectPromiseRef.rejectPromiseRef(connectWalletPromiseRef, new utils.DynamicError('No wallet address found'));
                        return;
                    }
                    const wallet = walletConnector.createWallet({
                        address: walletAddress,
                        chain: walletConnector.connectedChain,
                        connector: walletConnector,
                        id: 'external-funding-wallet',
                        isAuthenticated: false,
                        key: walletConnector.key,
                    });
                    resolvePromiseRef.resolvePromiseRef(connectWalletPromiseRef, wallet);
                    dynamicEvents.dynamicEvents.emit('walletConnectedForFunding', {
                        initiatedByWidget,
                        isPhantomRedirect: false,
                        wallet,
                    });
                }
                catch (error) {
                    rejectPromiseRef.rejectPromiseRef(connectWalletPromiseRef, error);
                    return;
                }
                finally {
                    setShowAuthFlow(false);
                }
            }),
            showDefaultFooter: true,
            viewWalletsFilter: utils.pipe(FilterWalletsForExternalFunding.FilterWalletsForExternalFunding).pipe(index.FilterChain(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain)),
        });
        setShowAuthFlow(true, {
            emitCancelAuth: false,
            ignoreIfIsEmbeddedWidget: true,
            initializeWalletConnect: true,
            performMultiWalletChecks: false,
        });
        return connectWalletPromiseRef.current.promise;
    }), [
        resetWalletConnectSession,
        clearStackAndPush,
        primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain,
        setShowAuthFlow,
        getWalletAddress,
    ]);
};

exports.useConnectWalletForFunding = useConnectWalletForFunding;
