'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { useRef, useCallback } from 'react';
import { StorageService, PHANTOM_REDIRECT_CONNECTION_TYPE_KEY, DynamicError, DeferredPromise, pipe } from '@dynamic-labs/utils';
import '../../../../context/DynamicContext/DynamicContext.js';
import '../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '@dynamic-labs/sdk-api-core';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../constants/colors.js';
import '../../../constants/values.js';
import '../../../../shared/consts/index.js';
import { useInternalDynamicEvents } from '../../events/useDynamicEvents/useDynamicEvents.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../store/state/nonce/nonce.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../config/ApiEndpoint.js';
import '../../../../store/state/user/user.js';
import '../../../../locale/locale.js';
import '../../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import { useUserWallets } from '../../../../context/UserWalletsContext/UserWalletsContext.js';
import { dynamicEvents } from '../../../../events/dynamicEvents.js';
import '../../../../store/state/authMode/authMode.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../functions/compareChains/compareChains.js';
import '../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../context/LoadingContext/LoadingContext.js';
import '../../../../context/WalletContext/WalletContext.js';
import '../../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import { getWalletConnectorOptions } from '../../../../store/state/walletOptions/walletOptions.js';
import { useHandleWalletItem } from '../../useWalletItemActions/useHandleWalletItem/useHandleWalletItem.js';
import 'react-i18next';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/OverlayCard/OverlayCard.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../useSubdomainCheck/useSubdomainCheck.js';
import { FilterChain } from '../../../functions/walletFilters/index.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../store/state/sendBalances.js';
import '../../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../context/OnrampContext/OnrampContext.js';
import { resolvePromiseRef } from '../../../functions/resolvePromiseRef/resolvePromiseRef.js';
import { rejectPromiseRef } from '../../../functions/rejectPromiseRef/rejectPromiseRef.js';
import { useWalletOptions } from '../../useWalletOptions/useWalletOptions.js';
import { FilterWalletsForExternalFunding } from '../utils/FilterWalletsForExternalFunding.js';
import '../../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../../../index.js';
import '../../../../store/state/tokenBalances.js';
import '../../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';

const useConnectWalletForFunding = () => {
    const { primaryWallet, setShowAuthFlow } = useInternalDynamicContext();
    const { clearStackAndPush } = useViewContext();
    const userWallets = useUserWallets();
    const initiatedByWidgetRef = useRef(false);
    const { walletOptions } = useWalletOptions();
    const internalConnectionPromiseRef = useRef(null);
    const connectWalletPromiseRef = useRef(null);
    const handleWalletMethod = useCallback((props) => __awaiter(void 0, void 0, void 0, function* () {
        // This is for phantom redirect: store the reason for this connection
        // so we don't lose the flow when redirected back
        const connectionType = {
            connectorConsumed: false,
            initiatedByWidget: initiatedByWidgetRef.current,
            type: 'external-wallet-funding',
        };
        StorageService.setItem(PHANTOM_REDIRECT_CONNECTION_TYPE_KEY, connectionType);
        const address = yield props.walletConnector.getAddress(props.getAddressOpts);
        if (!address) {
            rejectPromiseRef(internalConnectionPromiseRef, new DynamicError('No wallet address found'));
            return;
        }
        resolvePromiseRef(internalConnectionPromiseRef, address);
    }), []);
    const { handleWalletItemClick } = useHandleWalletItem({
        allowAlreadyConnectedWallet: true,
        onConnectOnly: handleWalletMethod,
        onCustodialWallet: handleWalletMethod,
        onInstalledExtension: handleWalletMethod,
        onQrCodeConnect: handleWalletMethod,
    });
    useInternalDynamicEvents('authFlowClose', () => {
        rejectPromiseRef(connectWalletPromiseRef, new DynamicError('User cancelled'));
    });
    const getWalletAddress = useCallback((walletConnector) => {
        const walletOption = walletOptions.find(({ key }) => key === walletConnector.key);
        if (!walletOption)
            return Promise.reject(new DynamicError(`Connect wallet for funding error: wallet option for ${walletConnector.key} not found`));
        internalConnectionPromiseRef.current = new DeferredPromise();
        handleWalletItemClick(Object.assign(Object.assign({}, walletOption), { walletConnector }));
        return internalConnectionPromiseRef.current.promise;
    }, [handleWalletItemClick, walletOptions]);
    const hasWalletConnectWallet = userWallets.some((wallet) => wallet.connector.isWalletConnect);
    // WC does not allow multiple sessions, so we have 2 cases here:
    // 1. The user has a linked WalletConnect wallet.
    //    In this case, we should not do anything, and our logic will prevent other WCs from being
    //    selected for funding.
    // 2. The user does not have a WalletConnect wallet linked.
    //    In this case, we should reset the WC session â€” this is because they might have just
    //    previously connected another WC wallet for funding and that session could still be active.
    const resetWalletConnectSession = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        if (hasWalletConnectWallet)
            return;
        const walletOption = getWalletConnectorOptions().find(({ walletConnector }) => walletConnector.isWalletConnect);
        yield (walletOption === null || walletOption === void 0 ? void 0 : walletOption.walletConnector.endSession());
        yield (walletOption === null || walletOption === void 0 ? void 0 : walletOption.walletConnector.init());
    }), [hasWalletConnectWallet]);
    return useCallback((_a) => __awaiter(void 0, [_a], void 0, function* ({ initiatedByWidget }) {
        if (connectWalletPromiseRef.current) {
            return connectWalletPromiseRef.current.promise;
        }
        resetWalletConnectSession();
        connectWalletPromiseRef.current = new DeferredPromise();
        clearStackAndPush('external-funding-wallet-list', {
            onSelectWallet: (_b) => __awaiter(void 0, [_b], void 0, function* ({ walletConnector }) {
                if (!connectWalletPromiseRef.current)
                    return;
                try {
                    initiatedByWidgetRef.current = initiatedByWidget;
                    const walletAddress = yield getWalletAddress(walletConnector);
                    if (!walletAddress) {
                        rejectPromiseRef(connectWalletPromiseRef, new DynamicError('No wallet address found'));
                        return;
                    }
                    const wallet = walletConnector.createWallet({
                        address: walletAddress,
                        chain: walletConnector.connectedChain,
                        connector: walletConnector,
                        id: 'external-funding-wallet',
                        isAuthenticated: false,
                        key: walletConnector.key,
                    });
                    resolvePromiseRef(connectWalletPromiseRef, wallet);
                    dynamicEvents.emit('walletConnectedForFunding', {
                        initiatedByWidget,
                        isPhantomRedirect: false,
                        wallet,
                    });
                }
                catch (error) {
                    rejectPromiseRef(connectWalletPromiseRef, error);
                    return;
                }
                finally {
                    setShowAuthFlow(false);
                }
            }),
            showDefaultFooter: true,
            viewWalletsFilter: pipe(FilterWalletsForExternalFunding).pipe(FilterChain(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain)),
        });
        setShowAuthFlow(true, {
            emitCancelAuth: false,
            ignoreIfIsEmbeddedWidget: true,
            initializeWalletConnect: true,
            performMultiWalletChecks: false,
        });
        return connectWalletPromiseRef.current.promise;
    }), [
        resetWalletConnectSession,
        clearStackAndPush,
        primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain,
        setShowAuthFlow,
        getWalletAddress,
    ]);
};

export { useConnectWalletForFunding };
