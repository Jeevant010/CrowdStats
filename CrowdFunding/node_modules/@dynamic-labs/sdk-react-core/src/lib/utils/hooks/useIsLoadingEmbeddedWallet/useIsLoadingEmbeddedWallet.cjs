'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var usingV3Wallets = require('../../functions/usingV3Wallets/usingV3Wallets.cjs');
var projectSettings = require('../../../store/state/projectSettings/projectSettings.cjs');
var isTurnkeyEnabled = require('../../functions/isTurnkeyEnabled/isTurnkeyEnabled.cjs');
var authMode = require('../../../store/state/authMode/authMode.cjs');
var user = require('../../../store/state/user/user.cjs');
require('@dynamic-labs/utils');
require('../../constants/values.cjs');
require('@dynamic-labs/sdk-api-core');

const useIsLoadingEmbeddedWallet = () => {
    const { user: user$1 } = user.useUser();
    const authMode$1 = authMode.useAuthMode();
    const projectSettings$1 = projectSettings.getProjectSettings();
    // we only want to show the loading state if the user has no wallets at all, and is creating a waas wallet
    // for example if they sign up with phantom wallet, we don't want to show the loading state
    // always return false for connect-only mode, because verified credentials are not used in this mode
    // except when user is logging in with email and will get an embedded wallet
    const isLoadingEmbeddedWallet = React.useMemo(() => {
        var _a, _b;
        if (!usingV3Wallets.usingV3Wallets(projectSettings$1) ||
            !isTurnkeyEnabled.isTurnkeyEnabled(projectSettings$1)) {
            return false;
        }
        const isEmailLogin = (_a = user$1 === null || user$1 === void 0 ? void 0 : user$1.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.some((credential) => credential.format === 'email');
        const hasWallet = (_b = user$1 === null || user$1 === void 0 ? void 0 : user$1.verifiedCredentials) === null || _b === void 0 ? void 0 : _b.some((credential) => credential.format === 'blockchain');
        if (authMode$1 === 'connect-only') {
            if (isEmailLogin) {
                if (hasWallet) {
                    return false;
                }
                return true;
            }
            // login with injected wallet will already have a primary wallet set so we dont need to show loading state
            return false;
        }
        // If user has NO blockchain credential, then we show loading state
        return !hasWallet;
    }, [projectSettings$1, user$1, authMode$1]);
    return { isLoadingEmbeddedWallet };
};

exports.useIsLoadingEmbeddedWallet = useIsLoadingEmbeddedWallet;
