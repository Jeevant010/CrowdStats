'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@dynamic-labs/utils');
var localStorage = require('../../constants/localStorage.cjs');
var values = require('../../constants/values.cjs');
var isCookieEnabled = require('../isCookieEnabled/isCookieEnabled.cjs');
var storeExpiresAt = require('../storeExpiresAt/storeExpiresAt.cjs');
var projectSettings = require('../../../store/state/projectSettings/projectSettings.cjs');

const storeAuthToken = ({ jwt, minifiedJwt, expiresAt, }) => {
    // expiresAt is always sent back by the backend, regardless of whether jwt/minifiedJwt are sent or not
    if (expiresAt !== undefined)
        storeExpiresAt.storeExpiresAt(expiresAt);
    if (jwt && minifiedJwt) {
        utils.StorageService.setItem(localStorage.AUTH_TOKEN, jwt, {
            priority: ['secureStorage', 'localStorage'],
        });
        utils.StorageService.setItem(localStorage.AUTH_MIN_TOKEN, minifiedJwt, {
            priority: ['secureStorage', 'localStorage'],
        });
        const projectSettings$1 = projectSettings.getProjectSettings();
        if (projectSettings$1 && isCookieEnabled.isCookieEnabled(projectSettings$1)) {
            // if cookie is enabled, but the backend returns a JWT, then use JS to store the cookie
            const expireDate = new Date(expiresAt * 1000).toUTCString();
            const authCookie = `${values.DYNAMIC_AUTH_COOKIE_NAME}=${minifiedJwt}; expires=${expireDate}; path=/; SameSite=Lax`;
            document.cookie = authCookie;
        }
    }
};

exports.storeAuthToken = storeAuthToken;
