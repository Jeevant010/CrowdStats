'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var shortenWalletAddress = require('../../../shared/utils/functions/shortenWalletAddress/shortenWalletAddress.cjs');
var getTimeSince = require('../../../widgets/DynamicWidget/helpers/getTimeSince.cjs');

/** Returns the name of the session or the shortened wallet address if no name is available */
const getSessionInformationName = (session) => { var _a; return (_a = session.origin) !== null && _a !== void 0 ? _a : shortenWalletAddress.shortenWalletAddress(session.sessionId); };
/** Returns the time since the session was created in a human readable format */
const getSessionInformationTimeSinceCreation = (session) => {
    const { value, unit } = getTimeSince.getTimeSince(new Date(session.timestamp));
    return `${value} ${unit}`;
};
/** Returns the expiration of the session in a human readable format */
const getSessionInformationExpiration = (session) => {
    const { value, unit } = getTimeSince.getTimeSince(new Date(), new Date(Number(session.session.expiresAt) * 1000));
    return `${value} ${unit}`;
};
/** Returns the spending limit of the session in ETH */
const getSessionInformationSpendingLimit = (session) => {
    const { limit } = session.session.feeLimit;
    const formatter = new Intl.NumberFormat(undefined, {
        maximumFractionDigits: 6,
    });
    const ethString = formatter.format(Number(limit) / Math.pow(10, 18));
    return `~${ethString} ETH`;
};
/** Exports the session information as a JSON string with a helper to process bigints */
const getSessionInformationJson = (session) => JSON.stringify(session, (_, val) => (typeof val === 'bigint' ? val.toString() : val), 2);

exports.getSessionInformationExpiration = getSessionInformationExpiration;
exports.getSessionInformationJson = getSessionInformationJson;
exports.getSessionInformationName = getSessionInformationName;
exports.getSessionInformationSpendingLimit = getSessionInformationSpendingLimit;
exports.getSessionInformationTimeSinceCreation = getSessionInformationTimeSinceCreation;
