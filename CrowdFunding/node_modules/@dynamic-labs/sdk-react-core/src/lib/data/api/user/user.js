'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { EmailAlreadyExistsError, CustomFieldNotUniqueError, UsernameAlreadyExistsError, TooManyEmailVerificationsError, InvalidPhoneNumberError, CookieInvalidError } from '@dynamic-labs/utils';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../shared/consts/index.js';
import { storeAuthTokenAndUser } from '../../../store/state/user/storeAuthTokenAndUser/storeAuthTokenAndUser.js';
import '../../../store/state/user/user.js';
import { getVerificationDestinationFromNextView } from '../../../utils/functions/getVerificationDestinationFromNextView/getVerificationDestinationFromNextView.js';
import { sdkApi } from '../api.js';
import { logResponseError } from '../utils.js';

const updateUserProfileFields = (environmentId, fields) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield sdkApi().updateSelf({
            environmentId,
            userFields: fields,
        });
        const verificationRequired = Boolean(getVerificationDestinationFromNextView(response.nextView));
        const userProfile = storeAuthTokenAndUser(Object.assign(Object.assign({}, response), { 
            // If verification is pending, do not update fields that require it
            preserveFieldsWithVerification: verificationRequired }));
        return Object.assign(Object.assign({}, response), { userProfile });
    }
    catch (e) {
        const error = yield logResponseError(e, 'Error updateUserProfileFields');
        if (e instanceof Response) {
            if (error.code === 'email_already_exists') {
                throw new EmailAlreadyExistsError();
            }
            else if (error.code === 'custom_field_data_not_unique') {
                throw new CustomFieldNotUniqueError();
            }
            else if (error.code === 'username_already_exists') {
                throw new UsernameAlreadyExistsError();
            }
            else if (error.code === 'too_many_verification_attempts') {
                throw new TooManyEmailVerificationsError();
            }
            else if (error.code === 'invalid_phone' ||
                error.code === 'invalid_sms_verification') {
                throw new InvalidPhoneNumberError(error.error);
            }
        }
        throw e;
    }
});
const mergeUserAccounts = (environmentId) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield sdkApi().mergeUsers({
            environmentId,
        });
        const user = storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        yield logResponseError(e, 'Error mergeUserAccounts');
        throw e;
    }
});
const verifyMergeUsers = (environmentId, mergeConflictResolutions) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield sdkApi().verifyMergeUsers({
            environmentId,
            mergeUserConflictResolutions: {
                mergeUserResolutions: mergeConflictResolutions,
            },
        });
        const user = storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        yield logResponseError(e, 'Error verifyMergeUsers');
        throw e;
    }
});
const hardDeleteUser = (environmentId) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield sdkApi().hardDeleteUser({ environmentId });
    }
    catch (e) {
        yield logResponseError(e, 'Error hardDeleteUser');
        throw e;
    }
});
const refreshUserJwt = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, }) {
    try {
        const response = yield sdkApi().refreshAuth({
            environmentId,
        });
        const user = storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        yield logResponseError(e, 'Error refreshUserJwt');
        return undefined;
    }
});
const getAuthenticatedUser = (_b) => __awaiter(void 0, [_b], void 0, function* ({ environmentId, }) {
    try {
        return yield sdkApi().getAuthenticatedUser({
            environmentId,
        });
    }
    catch (e) {
        yield logResponseError(e, 'Error getAuthenticatedUser');
        // only explicitly throw `CookieInvalidError` when we attempt to get the authenticated user
        // and the backend returns a 401, indicating that there is no valid auth for the request
        if (e.status === 401) {
            logger.error('No valid auth for getAuthenticatedUser', e);
            throw new CookieInvalidError();
        }
        logger.error('Other error getting authenticated user', e);
        return undefined;
    }
});
/** Hook implementation of [getUserFieldsCheck] */
const getUserFieldsCheck = (_c) => __awaiter(void 0, [_c], void 0, function* ({ environmentId, filter, }) {
    try {
        return yield sdkApi().getUserFieldsCheck({
            environmentId,
            filter,
        });
    }
    catch (e) {
        yield logResponseError(e, 'Error checking user field availability');
        return undefined;
    }
});

export { getAuthenticatedUser, getUserFieldsCheck, hardDeleteUser, mergeUserAccounts, refreshUserJwt, updateUserProfileFields, verifyMergeUsers };
