'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var sdkApiCore = require('@dynamic-labs/sdk-api-core');
var utils = require('@dynamic-labs/utils');
var version = require('../../../version.cjs');
var ApiEndpoint = require('../../config/ApiEndpoint.cjs');
var isGlobalWalletPopup = require('../../shared/utils/functions/isGlobalWalletPopup/isGlobalWalletPopup.cjs');
var projectSettings = require('../../store/state/projectSettings/projectSettings.cjs');
require('../../utils/constants/values.cjs');
require('../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/multi-wallet');
require('../../shared/logger.cjs');
require('../../utils/constants/colors.cjs');
var getMinAuthToken = require('../../utils/functions/getMinAuthToken/getMinAuthToken.cjs');
require('react-international-phone');
var getDeviceFingerprint = require('../../utils/functions/getDeviceFingerprint/getDeviceFingerprint.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react');
require('react/jsx-runtime');
require('../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../shared/consts/index.cjs');
require('../../store/state/nonce/nonce.cjs');
var randomString = require('../../utils/functions/randomString/randomString.cjs');
var isCookieEnabled = require('../../utils/functions/isCookieEnabled/isCookieEnabled.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');

const sdkApi = ({ customHeaders } = {}) => {
    const settings = {
        basePath: ApiEndpoint.getBaseUrl(),
        headers: Object.assign({ 'Content-Type': 'application/json', 'x-dyn-request-id': randomString.randomString(50) }, customHeaders),
    };
    const minJwt = getMinAuthToken.getMinAuthToken();
    if (minJwt) {
        settings.headers.Authorization = `Bearer ${minJwt}`;
    }
    const deviceFingerprint = getDeviceFingerprint.getDeviceFingerprint();
    if (deviceFingerprint) {
        settings.headers['x-dyn-device-fingerprint'] = deviceFingerprint;
    }
    const projectSettings$1 = projectSettings.getProjectSettings();
    const credentials = projectSettings$1 && isCookieEnabled.isCookieEnabled(projectSettings$1) ? 'include' : undefined;
    settings.headers['x-dyn-version'] = `WalletKit/${version.VERSION}`;
    settings.headers['x-dyn-api-version'] = `API/${version.API_VERSION}`;
    settings.headers['x-dyn-is-global-wallet-popup'] = isGlobalWalletPopup.isGlobalWalletPopup()
        ? 'true'
        : 'false';
    return new sdkApiCore.SDKApi(new sdkApiCore.Configuration(Object.assign(Object.assign({}, settings), { credentials, fetchApi: utils.FetchService.fetch })));
};

exports.sdkApi = sdkApi;
