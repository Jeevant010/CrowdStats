'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { DynamicError } from '@dynamic-labs/utils';
import { USER_NOT_LOGGED_IN } from '../../../../utils/constants/errors.js';
import { logger } from '../../../../shared/logger.js';

const handleExportInitCheck = ({ user, wallet, }) => {
    var _a, _b;
    if (!user) {
        throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) || !(wallet === null || wallet === void 0 ? void 0 : wallet.id)) {
        throw new DynamicError('Connector is missing. Please make sure you added EthereumWalletConnectors and/or SolanaWalletConnectors to DynamicProvider settings');
    }
    const connector = wallet.connector;
    const walletProperties = (_b = (_a = user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith('dynamicwaas'))) === null || _b === void 0 ? void 0 : _b.walletProperties;
    if (!walletProperties) {
        throw new DynamicError('Invalid token!');
    }
    return {
        connector,
        walletProperties,
    };
};
const exportWaasCredential = (_a) => __awaiter(void 0, [_a], void 0, function* ({ user, wallet, address, iframeContainer, }) {
    const { connector, walletProperties } = handleExportInitCheck({
        user,
        wallet,
    });
    connector.exportPrivateKey({
        accountAddress: address || (walletProperties === null || walletProperties === void 0 ? void 0 : walletProperties.accountAddress),
        displayContainer: iframeContainer,
    });
    return true;
});
const cleanupExport = (_b) => __awaiter(void 0, [_b], void 0, function* ({ wallet }) {
    var _c;
    const connector = wallet === null || wallet === void 0 ? void 0 : wallet.connector;
    // clear iframeStamper and its reference
    try {
        (_c = connector === null || connector === void 0 ? void 0 : connector.getExportHandler()) === null || _c === void 0 ? void 0 : _c.clear();
    }
    catch (error) {
        logger.error('Error cleaning up export:', error);
    }
});

export { cleanupExport, exportWaasCredential };
