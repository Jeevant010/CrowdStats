'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
var InjectedWalletBase = require('../../injected/InjectedWalletBase.cjs');
var logger = require('../logger.cjs');

const getConnectorConstructorInjectedWallet = (key, wallet) => {
    const { shortName } = wallet;
    const name = shortName || wallet.name;
    const walletConnectorFallback = Boolean(wallet.walletConnect);
    return class extends InjectedWalletBase.InjectedWalletBase {
        constructor() {
            super(...arguments);
            this.name = name;
            this.walletConnectorFallback = walletConnectorFallback;
            // this is the key from the wallet book entry so that we don't purely rely on the normalized name
            this.overrideKey = key;
        }
        getAddress() {
            const _super = Object.create(null, {
                getAddress: { get: () => super.getAddress }
            });
            return _tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                if (this.isInstalledOnBrowser()) {
                    return _super.getAddress.call(this);
                }
                const inAppBrowserBase = (_a = this.metadata) === null || _a === void 0 ? void 0 : _a.inAppBrowserUrl;
                if (!inAppBrowserBase) {
                    const error = new Error(`No inAppBrowserBase found for ${this.name}.`);
                    logger.logger.error(error.message);
                    throw error;
                }
                // TODO: use PlatformService
                utils.PlatformService.openURL(`${inAppBrowserBase}/${window.location.href}`);
                return undefined;
            });
        }
    };
};

exports.getConnectorConstructorInjectedWallet = getConnectorConstructorInjectedWallet;
