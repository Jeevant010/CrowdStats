'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
var ethereumCore = require('@dynamic-labs/ethereum-core');
var ethProviderHelper = require('../ethProviderHelper.cjs');
var WalletConnectConnector = require('../walletConnect/WalletConnectConnector/WalletConnectConnector.cjs');
var logger = require('../utils/logger.cjs');

class InjectedWalletBase extends ethereumCore.EthereumWalletConnector {
    constructor() {
        super(...arguments);
        this.walletConnectorFallback = false;
    }
    get ethProviderHelper() {
        if (!this._ethProviderHelper) {
            this._ethProviderHelper = new ethProviderHelper.EthProviderHelper(this);
        }
        return this._ethProviderHelper;
    }
    getMobileOrInstalledWallet() {
        var _a;
        if (this.isInstalledOnBrowser()) {
            return this;
        }
        // this is to handle the case where the user is in a webview.
        // when the user is in a webview, customers should set the deepLinkPreference prop to universal,
        // in which case this condition will be false, and the SDK will use WalletConnect (if available)
        if (((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.inAppBrowserUrl) &&
            this.mobileExperience === 'in-app-browser' &&
            utils.isMobile()) {
            return this;
        }
        // this is the case where the wallet is not installed on the browser and
        // it does not support WalletConnect. in this case, the SDK will instruct
        // the user to download the wallet extension
        if (!this.walletConnectorFallback) {
            return this;
        }
        // if there is no WC project ID, we should not use WC
        if (!this.constructorProps.projectId) {
            logger.logger.debug('[InjectedWalletBase] getMobileOrInstalledWallet - No WC project ID');
            return this;
        }
        return new WalletConnectConnector.WalletConnectConnector(Object.assign(Object.assign({}, this.constructorProps), { walletName: this.name }));
    }
    findProvider() {
        var _a;
        return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.getInstalledProvider();
    }
    setupEventListeners() {
        const provider = this.getWalletClient();
        if (!provider)
            return;
        if (!this.ethProviderHelper)
            return;
        const { tearDownEventListeners } = this.ethProviderHelper._setupEventListeners(this);
        this.teardownEventListeners = tearDownEventListeners;
    }
    getWalletClient(chainId) {
        var _a;
        return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.findWalletClient(chainId);
    }
    isInstalledOnBrowser() {
        var _a;
        return ((_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.findProvider()) !== undefined;
    }
    getAddress() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.getAddress();
        });
    }
    connect() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            yield this.getAddress();
        });
    }
    signMessage(messageToSign) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.signMessage(messageToSign);
        });
    }
    proveOwnership(address, messageToSign) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            yield this.validateActiveWallet(address);
            return this.signMessage(messageToSign);
        });
    }
    endSession() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const provider = (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.findProvider();
            if (!provider)
                return;
            void provider
                .request({
                method: 'wallet_revokePermissions',
                params: [
                    {
                        eth_accounts: {},
                    },
                ],
            })
                .catch((err) => {
                logger.logger.error('[InjectedWalletBase] endSession - Error revoking permissions', err);
            });
        });
    }
    providerSwitchNetwork(_a) {
        const _super = Object.create(null, {
            providerSwitchNetwork: { get: () => super.providerSwitchNetwork }
        });
        return _tslib.__awaiter(this, arguments, void 0, function* ({ network, provider, }) {
            return _super.providerSwitchNetwork.call(this, { network, provider });
        });
    }
}

exports.InjectedWalletBase = InjectedWalletBase;
