'use strict';

var getClient = require('./getClient.cjs.js');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
var mini = require('@zod/mini');
var EventEmitter = require('eventemitter3');

/**
 * Returns a new instance of the SDK API client.
 *
 * This is not meant for storing, as it is very light we can create it whenever needed.
 */ const createApiClient = (client)=>{
    const core = getClient.getCore(client);
    const settings = {
        basePath: core.apiBaseUrl,
        headers: {
            'Content-Type': 'application/json',
            'x-dyn-api-version': getClient.dependencies['@dynamic-labs/sdk-api-core'],
            'x-dyn-version': core.version
        }
    };
    if (client.token) {
        settings.headers.Authorization = `Bearer ${client.token}`;
    }
    return new sdkApiCore.SDKApi(new sdkApiCore.Configuration(getClient._extends({}, settings, {
        fetchApi: core.fetch
    })));
};

/**
 * Updates the project settings in the core state to the latest values.
 */ const fetchProjectSettings = async (client)=>{
    const core = getClient.getCore(client);
    const apiClient = createApiClient(client);
    const projectSettings = await apiClient.getEnvironmentSettings({
        environmentId: core.environmentId,
        sdkVersion: `WalletKit/${core.version}`
    }, {
        credentials: 'omit'
    });
    core.state.set({
        projectSettings
    });
    return projectSettings;
};

const logout = async (client)=>{
    const core = getClient.getCore(client);
    const apiClient = createApiClient(client);
    await apiClient.revokeSession({
        environmentId: core.environmentId
    });
    core.state.set({
        sessionExpiresAt: null,
        token: null,
        user: null
    });
    getClient.emitEvent(client, 'logout');
    // Refetch project settings
    void fetchProjectSettings(client);
};

/**
 * A replacement for setTimeout that supports delays longer than 2147483647ms (~24.8 days).
 */ const setLongTimeout = (callback, delay)=>{
    const MAX_DELAY = 2147483647; // Maximum delay for setTimeout (2^31 - 1)
    let timeoutId = null;
    let remaining = delay;
    const run = ()=>{
        if (remaining <= MAX_DELAY) {
            timeoutId = setTimeout(callback, remaining);
        } else {
            timeoutId = setTimeout(()=>{
                remaining -= MAX_DELAY;
                run();
            }, MAX_DELAY);
        }
    };
    run();
    // Return a cancel function
    return ()=>{
        if (timeoutId !== null) {
            clearTimeout(timeoutId);
        }
    };
};

/**
 * Sets up a timeout to log out the user when their token expires.
 */ const initializeAuth = (client)=>{
    const core = getClient.getCore(client);
    let clearExpirationTimeout = null;
    const onChangeExpiration = getClient.subscribeWithSelector(core.state, (state)=>state.sessionExpiresAt);
    const checkExpiration = ()=>{
        const expiration = core.state.get().sessionExpiresAt;
        clearExpirationTimeout == null ? void 0 : clearExpirationTimeout();
        if (!expiration) {
            return;
        }
        const now = new Date();
        const timeUntilExpiration = expiration.getTime() - now.getTime();
        if (timeUntilExpiration <= 0) {
            void logout(client);
            return;
        }
        // Wait for token expiration
        clearExpirationTimeout = setLongTimeout(checkExpiration, timeUntilExpiration);
    };
    onChangeExpiration(checkExpiration);
    checkExpiration();
};

/**
 * Maps the state keys to the event names.
 *
 * This is mainly to ensure that whenever a new state key is added, the developer
 * will have to come to this file and remember to add it here and in the interface.
 */ const stateChangeEvents = {
    initStatus: 'changed:initStatus',
    projectSettings: 'changed:projectSettings',
    token: 'changed:token',
    user: 'changed:user'
};

const raiseStateEvents = (client)=>{
    const core = getClient.getCore(client);
    core.state.subscribe((value, previous)=>{
        const eventEntries = Object.entries(stateChangeEvents);
        eventEntries.forEach(([key, event])=>{
            // Check if this key had a change
            if (getClient.isEqualShallow(value[key], previous[key])) return;
            core.eventEmitter.emit(event, value[key], previous[key]);
        });
    });
};

const SDK_API_CORE_VERSION = getClient.dependencies['@dynamic-labs/sdk-api-core'];

const createStorageKeySchema = (params)=>{
    return params;
};

const sessionKeySchema = createStorageKeySchema({
    key: 'session',
    schema: mini.z.object({
        /**
     * Milliseconds since epoch of session expiration.
     */ sessionExpiration: mini.z.number(),
        /**
     * Token will be undefined in environments with cookie based sessions.
     */ token: mini.z.optional(mini.z.string())
    })
});

const stateStorageKeySchema = createStorageKeySchema({
    key: 'state',
    schema: mini.z.object({
        apiVersion: mini.z.string(),
        projectSettings: mini.z.custom(),
        user: mini.z.custom()
    })
});

const hydrateStateWithStorage = async (client)=>{
    const core = getClient.getCore(client);
    const stateChanges = {};
    // ================ TOKEN =================
    const session = await core.storage.getItem(sessionKeySchema);
    const sessionExpiration = session ? new Date(session.sessionExpiration) : null;
    const isSessionValid = session !== null && sessionExpiration !== null && sessionExpiration > new Date();
    if (isSessionValid) {
        var _session_token;
        stateChanges.token = (_session_token = session.token) != null ? _session_token : null;
        stateChanges.sessionExpiresAt = sessionExpiration;
    }
    // ================ STATE =================
    const storedState = await core.storage.getItem(stateStorageKeySchema);
    // Only hydrate state if it came from an API with the same version as the current SDK
    if ((storedState == null ? void 0 : storedState.apiVersion) === SDK_API_CORE_VERSION) {
        // Variables that should only be hydrated if the session is valid
        if (isSessionValid) {
            stateChanges.user = storedState.user;
            stateChanges.projectSettings = storedState.projectSettings;
        }
    }
    if (Object.keys(stateChanges).length > 0) {
        core.state.set(stateChanges);
    }
};

const syncStateWithStorage = (client)=>{
    const core = getClient.getCore(client);
    core.state.subscribe((state)=>{
        if (state.sessionExpiresAt === null) {
            void core.storage.removeItem(sessionKeySchema);
        } else {
            var _state_token;
            void core.storage.setItem(sessionKeySchema, {
                sessionExpiration: state.sessionExpiresAt.getTime(),
                token: (_state_token = state.token) != null ? _state_token : undefined
            });
        }
        void core.storage.setItem(stateStorageKeySchema, {
            apiVersion: SDK_API_CORE_VERSION,
            projectSettings: state.projectSettings,
            user: state.user
        });
    });
};

const initializeStorageSync = async (client)=>{
    // Initialize the state value with what's stored in the storage
    await hydrateStateWithStorage(client);
    // Keep the storage up to date with the state
    syncStateWithStorage(client);
};

class ClientAlreadyInitializedError extends getClient.BaseError {
    constructor(){
        super({
            cause: null,
            docsUrl: null,
            name: 'ClientAlreadyInitializedError',
            shortMessage: 'Client must not be initialized more than once'
        });
    }
}

/**
 * Orchestrates the initialization of all modules and services of the SDK, and keeps
 * the loading flag updated.
 */ const initializeClient = async (client)=>{
    const core = getClient.getCore(client);
    if (core.state.get().initStatus !== 'uninitialized') {
        throw new ClientAlreadyInitializedError();
    }
    core.state.set({
        initStatus: 'in-progress'
    });
    initializeAuth(client);
    raiseStateEvents(client);
    const initializeStorageSyncPromise = initializeStorageSync(client);
    const fetchProjectSettingsPromise = initializeStorageSyncPromise.then(async ()=>{
        if (!core.state.get().projectSettings) {
            await fetchProjectSettings(client);
        }
    });
    core.initTrack.track({
        name: 'initialize-storage-sync',
        promise: initializeStorageSyncPromise
    });
    core.initTrack.track({
        name: 'fetch-project-settings',
        promise: fetchProjectSettingsPromise
    });
    try {
        await core.initTrack.waitForAll();
        core.state.set({
            initStatus: 'finished'
        });
    } catch (error) {
        core.state.set({
            initStatus: 'failed'
        });
        throw error;
    }
};

/**
 * Indicates if the code is running in a server-side environment.
 */ // eslint-disable-next-line no-restricted-globals
const isServerSideRendering = ()=>typeof window === 'undefined';

const createDeferredPromise = ()=>{
    let resolve;
    let reject;
    const promise = new Promise((_resolve, _reject)=>{
        resolve = _resolve;
        reject = _reject;
    });
    return {
        promise,
        reject: (reason)=>reject == null ? void 0 : reject(reason),
        resolve: (value)=>resolve == null ? void 0 : resolve(value)
    };
};

/**
 * Creates a tracker that associates names with promises and raises as promises resolve.
 */ const createAsyncTrack = ()=>{
    /**
   * Whether tracking is enabled.
   * All processes must be tracked on the same node tick.
   *
   * This ensures no process is missed (as it would throw when tracked on a different node tick).
   */ let isTrackEnabled = true;
    const eventEmitter = new EventEmitter.EventEmitter();
    const allSettledPromise = createDeferredPromise();
    const tracker = new Map();
    /**
   * Checks if all processes are initialized and resolves the main promise if they are.
   */ const checkIfAllSettled = ()=>{
        const allSettled = Array.from(tracker.values()).every((status)=>status === 'resolved');
        if (!allSettled) return;
        allSettledPromise.resolve();
    };
    const track = ({ name, promise })=>{
        if (!isTrackEnabled) {
            throw new getClient.CannotTrackError();
        }
        // Disable tracking in the next node tick
        void Promise.resolve().then(()=>isTrackEnabled = false);
        tracker.set(name, 'pending');
        promise.then(()=>{
            tracker.set(name, 'resolved');
            eventEmitter.emit('resolved', name);
            checkIfAllSettled();
        }).catch((error)=>{
            tracker.set(name, 'failed');
            eventEmitter.emit('failed', name, error);
            allSettledPromise.reject(error);
        });
    };
    const waitForAll = ()=>allSettledPromise.promise;
    const getTracker = ()=>tracker;
    return {
        getTracker,
        off: eventEmitter.off.bind(eventEmitter),
        on: eventEmitter.on.bind(eventEmitter),
        track,
        waitForAll
    };
};

const createEventEmitter = ()=>new EventEmitter();

class UnavailableInServerSideError extends getClient.BaseError {
    constructor(unavailableFeature){
        super({
            cause: null,
            docsUrl: null,
            name: 'UnavailableInServerSideError',
            shortMessage: `This function is not available in server-side rendering: ${unavailableFeature}`
        });
    }
}

/**
 * Creates a fetch instance that uses the native window.fetch API.
 */ const createWebFetch = ()=>{
    if (isServerSideRendering()) {
        return ()=>Promise.reject(new UnavailableInServerSideError('createWebFetch'));
    }
    // eslint-disable-next-line no-restricted-globals -- this is the abstraction for fetch
    return window.fetch;
};

/**
 * Log levels and their corresponding numeric values
 */ const LOG_LEVELS = {
    debug: 0,
    error: 3,
    info: 1,
    warn: 2
};
// Assign to avoid lint errors
const defaultConsole = console;
/**
 * Creates a logger instance with configurable log level and event emission capabilities.
 * @returns A logger instance with debug, info, warn, and error methods
 */ const createLogger = (options = {})=>{
    const eventEmitter = new EventEmitter.EventEmitter();
    var _options_level;
    // Default to 'debug' if no level is provided
    const minLevel = (_options_level = options.level) != null ? _options_level : 'warn';
    // Helper to decide if we should log based on current log level
    const shouldLog = (level)=>{
        return LOG_LEVELS[level] >= LOG_LEVELS[minLevel];
    };
    // Helper to format the log message
    const formatMessage = (level, message)=>{
        const timestamp = new Date().toISOString();
        return `[${timestamp}] ${level.toUpperCase()}: ${message}`;
    };
    // Unified logger function that checks the level and calls the appropriate console method
    const log = (level, consoleMethod, message, ...args)=>{
        eventEmitter.emit('log', level, message, ...args);
        if (!shouldLog(level)) return;
        consoleMethod(formatMessage(level, message), ...args);
    };
    return {
        debug: (message, ...args)=>log('debug', defaultConsole.debug, message, ...args),
        error: (message, ...args)=>log('error', defaultConsole.error, message, ...args),
        info: (message, ...args)=>log('info', defaultConsole.info, message, ...args),
        off: eventEmitter.off.bind(eventEmitter),
        on: eventEmitter.on.bind(eventEmitter),
        warn: (message, ...args)=>log('warn', defaultConsole.warn, message, ...args)
    };
};

/**
 * Creates a deeplink opener that uses the native window.open API.
 */ const createWebDeeplinkOpener = ()=>{
    if (isServerSideRendering()) {
        return ()=>Promise.reject(new UnavailableInServerSideError('createWebDeeplinkOpener'));
    }
    return async (url)=>{
        // eslint-disable-next-line no-restricted-globals -- this is the abstraction for opening a deeplink
        window.open(url, '_blank');
    };
};

const formatForStorage = (value)=>{
    const item = {
        value
    };
    return JSON.stringify(item);
};
const parseFromStorage = (value)=>{
    try {
        const parsed = JSON.parse(value);
        return parsed;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    } catch (error) {
        return null;
    }
};

/**
 * Creates a Storage instance that uses localStorage as the storage model meant for use in the browser.
 */ const createWebStorage = ({ prefix = '' } = {})=>{
    const getPrefixedKey = (key)=>prefix ? `${prefix}_${key}` : key;
    return {
        getItem: async (storageKeySchema)=>{
            const rawItem = localStorage.getItem(getPrefixedKey(storageKeySchema.key));
            const parsedItem = rawItem ? parseFromStorage(rawItem) : null;
            /**
       * The item saved to localStorage may be malformed.
       * In this case, we remove it and return null.
       */ if (parsedItem !== null) {
                const parsed = storageKeySchema.schema.safeParse(parsedItem.value);
                if (parsed.success) {
                    return parsed.data;
                }
            }
            /**
       * The item saved to localStorage may be malformed.
       * In this case, we remove it and return null.
       */ localStorage.removeItem(getPrefixedKey(storageKeySchema.key));
            return null;
        },
        removeItem: async (storageKeySchema)=>{
            localStorage.removeItem(getPrefixedKey(storageKeySchema.key));
        },
        setItem: async (storageKeySchema, value)=>{
            const parsed = storageKeySchema.schema.safeParse(value);
            if (!parsed.success) {
                throw new getClient.InvalidStorageSet({
                    key: storageKeySchema.key,
                    value: JSON.stringify(value)
                });
            }
            const item = formatForStorage(parsed.data);
            localStorage.setItem(getPrefixedKey(storageKeySchema.key), item);
        }
    };
};

const createObservableState = (getInitialState)=>{
    // ===============
    // NOTIFICATIONS
    // ===============
    const subscribers = new Set();
    const notifySubscribers = (value, previous)=>{
        subscribers.forEach((callback)=>callback(value, previous));
    };
    const subscribe = (callback)=>{
        subscribers.add(callback);
        return ()=>unsubscribe(callback);
    };
    const unsubscribe = (callback)=>{
        subscribers.delete(callback);
    };
    // ===============
    // STATE
    // ===============
    const currentValue = getInitialState();
    const get = ()=>currentValue;
    const set = (partial)=>{
        const previous = JSON.parse(JSON.stringify(currentValue));
        Object.assign(currentValue, partial);
        notifySubscribers(currentValue, previous);
    };
    return {
        get,
        getInitialState,
        set,
        subscribe,
        unsubscribe
    };
};

/**
 * The default API base URL for Dynamic apps in production.
 */ const DEFAULT_API_BASE_URL = 'https://app.dynamic.xyz/api/v0';

/**
 * The initial values for the state of the client.
 */ const getInitialState = ()=>({
        initStatus: 'uninitialized',
        projectSettings: null,
        sessionExpiresAt: null,
        token: null,
        user: null
    });

/**
 * Creates a core instance that contains all the services and state of the Dynamic SDK client.
 */ const createCore = (config)=>{
    var _config_coreConfig, _config_coreConfig1, _config_coreConfig2, _config_coreConfig3, _config_coreConfig4;
    var _config_coreConfig_apiBaseUrl;
    const apiBaseUrl = (_config_coreConfig_apiBaseUrl = (_config_coreConfig = config.coreConfig) == null ? void 0 : _config_coreConfig.apiBaseUrl) != null ? _config_coreConfig_apiBaseUrl : DEFAULT_API_BASE_URL;
    var _config_coreConfig_logger;
    const logger = (_config_coreConfig_logger = (_config_coreConfig1 = config.coreConfig) == null ? void 0 : _config_coreConfig1.logger) != null ? _config_coreConfig_logger : createLogger();
    var _config_coreConfig_storage;
    const storage = (_config_coreConfig_storage = (_config_coreConfig2 = config.coreConfig) == null ? void 0 : _config_coreConfig2.storage) != null ? _config_coreConfig_storage : createWebStorage({
        prefix: `dynamic_${config.environmentId}`
    });
    var _config_coreConfig_fetch;
    const fetch = (_config_coreConfig_fetch = (_config_coreConfig3 = config.coreConfig) == null ? void 0 : _config_coreConfig3.fetch) != null ? _config_coreConfig_fetch : createWebFetch();
    var _config_coreConfig_openDeeplink;
    const openDeeplink = (_config_coreConfig_openDeeplink = (_config_coreConfig4 = config.coreConfig) == null ? void 0 : _config_coreConfig4.openDeeplink) != null ? _config_coreConfig_openDeeplink : createWebDeeplinkOpener();
    const state = createObservableState(getInitialState);
    const eventEmitter = createEventEmitter();
    const initTrack = createAsyncTrack();
    return {
        apiBaseUrl,
        environmentId: config.environmentId,
        eventEmitter,
        extensions: new Set(),
        fetch,
        initTrack,
        logger,
        openDeeplink,
        state,
        storage,
        version: getClient.version
    };
};

/**
 * Creates a new DynamicClient instance.
 *
 * Notice the `autoInitialize` flag is true by default (unless you're running
 * in SSR), so the client will be automatically initialized when created — if
 * you want to manually initialize the client, you can set the `autoInitialize`
 * flag to false and then later call the `initializeClient` function.
 *
 * Manually calling `initializeClient` also allows you to catch any potential
 * errors that may occur during initialization.
 */ const createDynamicClient = (config)=>{
    const core = createCore(config);
    const client = {
        get __core () {
            return core;
        },
        get initStatus () {
            return core.state.get().initStatus;
        },
        get projectSettings () {
            return core.state.get().projectSettings;
        },
        get token () {
            return core.state.get().token;
        },
        get user () {
            return core.state.get().user;
        }
    };
    var _config_autoInitialize;
    const shouldAutoInitialize = (_config_autoInitialize = config.autoInitialize) != null ? _config_autoInitialize : !isServerSideRendering();
    if (shouldAutoInitialize) {
        void initializeClient(client);
    }
    return client;
};

/**
 * Checks if an extension has been applied to the client.
 */ const hasExtension = (client, extensionKey)=>{
    const core = getClient.getCore(client);
    return core.extensions.has(extensionKey);
};

const assignClient = (target, client)=>{
    Object.defineProperty(target, '__client', {
        // hide from enumeration
        configurable: true,
        enumerable: false,
        get: ()=>client
    });
    return target;
};

const sendEmailOTP = async (client, { email })=>{
    const core = getClient.getCore(client);
    const apiClient = createApiClient(client);
    const { verificationUUID } = await apiClient.createEmailVerification({
        emailVerificationCreateRequest: {
            email
        },
        environmentId: core.environmentId
    });
    return assignClient({
        email,
        verificationUUID
    }, client);
};

// Source:
// https://github.com/dynamic-labs/redcoast/blob/main/apps/dashboard/src/app/routes/Configurations/Providers/components/SmsProviderSection/utils/countries.ts
// these are the countries was populated based on the wikipedia page
// referenced in twilio's docs: https://www.twilio.com/docs/voice/api/dialingpermissions-country-resource
// and this doc for country codes: https://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.pdf
const supportedCountries = {
    AC: {
        code: '247',
        name: 'Ascension'
    },
    AD: {
        code: '376',
        name: 'Andorra'
    },
    AE: {
        code: '971',
        name: 'United Arab Emirates'
    },
    AF: {
        code: '93',
        name: 'Afghanistan'
    },
    AG: {
        code: '1268',
        name: 'Antigua and Barbuda'
    },
    AI: {
        code: '1264',
        name: 'Anguilla'
    },
    AL: {
        code: '355',
        name: 'Albania'
    },
    AM: {
        code: '374',
        name: 'Armenia'
    },
    AO: {
        code: '244',
        name: 'Angola'
    },
    AR: {
        code: '54',
        name: 'Argentina'
    },
    AS: {
        code: '1684',
        name: 'American Samoa'
    },
    AT: {
        code: '43',
        name: 'Austria'
    },
    AU: {
        code: '61',
        name: 'Australia/Cocos/Christmas Island'
    },
    AW: {
        code: '297',
        name: 'Aruba'
    },
    AZ: {
        code: '994',
        name: 'Azerbaijan'
    },
    BA: {
        code: '387',
        name: 'Bosnia and Herzegovina'
    },
    BB: {
        code: '1246',
        name: 'Barbados'
    },
    BD: {
        code: '880',
        name: 'Bangladesh'
    },
    BE: {
        code: '32',
        name: 'Belgium'
    },
    BF: {
        code: '226',
        name: 'Burkina Faso'
    },
    BG: {
        code: '359',
        name: 'Bulgaria'
    },
    BH: {
        code: '973',
        name: 'Bahrain'
    },
    BI: {
        code: '257',
        name: 'Burundi'
    },
    BJ: {
        code: '229',
        name: 'Benin'
    },
    BM: {
        code: '1441',
        name: 'Bermuda'
    },
    BN: {
        code: '673',
        name: 'Brunei'
    },
    BO: {
        code: '591',
        name: 'Bolivia'
    },
    BR: {
        code: '55',
        name: 'Brazil'
    },
    BS: {
        code: '1242',
        name: 'Bahamas'
    },
    BT: {
        code: '975',
        name: 'Bhutan'
    },
    BW: {
        code: '267',
        name: 'Botswana'
    },
    BY: {
        code: '375',
        name: 'Belarus'
    },
    BZ: {
        code: '501',
        name: 'Belize'
    },
    CA: {
        code: '1',
        name: 'Canada'
    },
    CD: {
        code: '243',
        name: 'Congo, Dem Rep'
    },
    CF: {
        code: '236',
        name: 'Central Africa'
    },
    CG: {
        code: '242',
        name: 'Congo'
    },
    CH: {
        code: '41',
        name: 'Switzerland'
    },
    CI: {
        code: '225',
        name: 'Ivory Coast'
    },
    CK: {
        code: '682',
        name: 'Cook Islands'
    },
    CL: {
        code: '56',
        name: 'Chile'
    },
    CM: {
        code: '237',
        name: 'Cameroon'
    },
    CN: {
        code: '86',
        name: 'China'
    },
    CO: {
        code: '57',
        name: 'Colombia'
    },
    CR: {
        code: '506',
        name: 'Costa Rica'
    },
    CU: {
        code: '53',
        name: 'Cuba'
    },
    CV: {
        code: '238',
        name: 'Cape Verde'
    },
    CW: {
        code: '599',
        name: 'Curaçao and Caribbean Netherlands (Bonaire, Sint Eustatius, Sint Maarten, Saba)'
    },
    CY: {
        code: '357',
        name: 'Cyprus'
    },
    CZ: {
        code: '420',
        name: 'Czech Republic'
    },
    DE: {
        code: '49',
        name: 'Germany'
    },
    DJ: {
        code: '253',
        name: 'Djibouti'
    },
    DK: {
        code: '45',
        name: 'Denmark'
    },
    DM: {
        code: '1767',
        name: 'Dominica'
    },
    DO: {
        code: '1829',
        name: 'Dominican Republic'
    },
    DZ: {
        code: '213',
        name: 'Algeria'
    },
    EC: {
        code: '593',
        name: 'Ecuador'
    },
    EE: {
        code: '372',
        name: 'Estonia'
    },
    EG: {
        code: '20',
        name: 'Egypt'
    },
    ER: {
        code: '291',
        name: 'Eritrea'
    },
    ES: {
        code: '34',
        name: 'Spain'
    },
    ET: {
        code: '251',
        name: 'Ethiopia'
    },
    FI: {
        code: '358',
        name: 'Finland/Aland Islands'
    },
    FJ: {
        code: '679',
        name: 'Fiji'
    },
    FK: {
        code: '500',
        name: 'Falkland Islands'
    },
    FM: {
        code: '691',
        name: 'Micronesia'
    },
    FO: {
        code: '298',
        name: 'Faroe Islands'
    },
    FR: {
        code: '33',
        name: 'France'
    },
    GA: {
        code: '241',
        name: 'Gabon'
    },
    GB: {
        code: '44',
        name: 'United Kingdom'
    },
    GD: {
        code: '1473',
        name: 'Grenada'
    },
    GE: {
        code: '995',
        name: 'Georgia'
    },
    GF: {
        code: '594',
        name: 'French Guiana'
    },
    GG: {
        code: '44',
        name: 'Guernsey/Jersey'
    },
    GH: {
        code: '233',
        name: 'Ghana'
    },
    GI: {
        code: '350',
        name: 'Gibraltar'
    },
    GL: {
        code: '299',
        name: 'Greenland'
    },
    GM: {
        code: '220',
        name: 'Gambia'
    },
    GN: {
        code: '224',
        name: 'Guinea'
    },
    GP: {
        code: '590',
        name: 'Guadeloupe'
    },
    GQ: {
        code: '240',
        name: 'Equatorial Guinea'
    },
    GR: {
        code: '30',
        name: 'Greece'
    },
    GT: {
        code: '502',
        name: 'Guatemala'
    },
    GU: {
        code: '1671',
        name: 'Guam'
    },
    GW: {
        code: '245',
        name: 'Guinea-Bissau'
    },
    GY: {
        code: '592',
        name: 'Guyana'
    },
    HK: {
        code: '852',
        name: 'Hong Kong'
    },
    HN: {
        code: '504',
        name: 'Honduras'
    },
    HR: {
        code: '385',
        name: 'Croatia'
    },
    HT: {
        code: '509',
        name: 'Haiti'
    },
    HU: {
        code: '36',
        name: 'Hungary'
    },
    IC: {
        code: '3491',
        name: 'Canary Islands'
    },
    ID: {
        code: '62',
        name: 'Indonesia'
    },
    IE: {
        code: '353',
        name: 'Ireland'
    },
    IL: {
        code: '972',
        name: 'Israel'
    },
    IM: {
        code: '44',
        name: 'Isle of Man'
    },
    IN: {
        code: '91',
        name: 'India'
    },
    IQ: {
        code: '964',
        name: 'Iraq'
    },
    IR: {
        code: '98',
        name: 'Iran'
    },
    IS: {
        code: '354',
        name: 'Iceland'
    },
    IT: {
        code: '39',
        name: 'Italy'
    },
    JM: {
        code: '1876',
        name: 'Jamaica'
    },
    JO: {
        code: '962',
        name: 'Jordan'
    },
    JP: {
        code: '81',
        name: 'Japan'
    },
    KE: {
        code: '254',
        name: 'Kenya'
    },
    KG: {
        code: '996',
        name: 'Kyrgyzstan'
    },
    KH: {
        code: '855',
        name: 'Cambodia'
    },
    KI: {
        code: '686',
        name: 'Kiribati'
    },
    KM: {
        code: '269',
        name: 'Comoros'
    },
    KN: {
        code: '1869',
        name: 'St Kitts and Nevis'
    },
    KP: {
        code: '850',
        name: "Korea Dem People's Rep"
    },
    KR: {
        code: '82',
        name: 'Korea Republic of'
    },
    KW: {
        code: '965',
        name: 'Kuwait'
    },
    KY: {
        code: '1345',
        name: 'Cayman Islands'
    },
    LA: {
        code: '856',
        name: 'Laos PDR'
    },
    LB: {
        code: '961',
        name: 'Lebanon'
    },
    LC: {
        code: '1758',
        name: 'St Lucia'
    },
    LI: {
        code: '423',
        name: 'Liechtenstein'
    },
    LK: {
        code: '94',
        name: 'Sri Lanka'
    },
    LR: {
        code: '231',
        name: 'Liberia'
    },
    LS: {
        code: '266',
        name: 'Lesotho'
    },
    LT: {
        code: '370',
        name: 'Lithuania'
    },
    LU: {
        code: '352',
        name: 'Luxembourg'
    },
    LV: {
        code: '371',
        name: 'Latvia'
    },
    LY: {
        code: '218',
        name: 'Libya'
    },
    MA: {
        code: '212',
        name: 'Morocco/Western Sahara'
    },
    MC: {
        code: '377',
        name: 'Monaco'
    },
    MD: {
        code: '373',
        name: 'Moldova'
    },
    ME: {
        code: '382',
        name: 'Montenegro'
    },
    MG: {
        code: '261',
        name: 'Madagascar'
    },
    MH: {
        code: '692',
        name: 'Marshall Islands'
    },
    MK: {
        code: '389',
        name: 'Republic of North Macedonia'
    },
    ML: {
        code: '223',
        name: 'Mali'
    },
    MM: {
        code: '95',
        name: 'Myanmar (Burma)'
    },
    MN: {
        code: '976',
        name: 'Mongolia'
    },
    MO: {
        code: '853',
        name: 'Macau'
    },
    MP: {
        code: '1670',
        name: 'Northern Mariana Islands'
    },
    MQ: {
        code: '596',
        name: 'Martinique'
    },
    MR: {
        code: '222',
        name: 'Mauritania'
    },
    MS: {
        code: '1664',
        name: 'Montserrat'
    },
    MT: {
        code: '356',
        name: 'Malta'
    },
    MU: {
        code: '230',
        name: 'Mauritius'
    },
    MV: {
        code: '960',
        name: 'Maldives'
    },
    MW: {
        code: '265',
        name: 'Malawi'
    },
    MX: {
        code: '52',
        name: 'Mexico'
    },
    MY: {
        code: '60',
        name: 'Malaysia'
    },
    MZ: {
        code: '258',
        name: 'Mozambique'
    },
    NA: {
        code: '264',
        name: 'Namibia'
    },
    NC: {
        code: '687',
        name: 'New Caledonia'
    },
    NE: {
        code: '227',
        name: 'Niger'
    },
    NF: {
        code: '672',
        name: 'Norfolk Island'
    },
    NG: {
        code: '234',
        name: 'Nigeria'
    },
    NI: {
        code: '505',
        name: 'Nicaragua'
    },
    NL: {
        code: '31',
        name: 'Netherlands'
    },
    NO: {
        code: '47',
        name: 'Norway'
    },
    NP: {
        code: '977',
        name: 'Nepal'
    },
    NU: {
        code: '683',
        name: 'Niue'
    },
    NZ: {
        code: '64',
        name: 'New Zealand'
    },
    OM: {
        code: '968',
        name: 'Oman'
    },
    PA: {
        code: '507',
        name: 'Panama'
    },
    PE: {
        code: '51',
        name: 'Peru'
    },
    PF: {
        code: '689',
        name: 'French Polynesia'
    },
    PG: {
        code: '675',
        name: 'Papua New Guinea'
    },
    PH: {
        code: '63',
        name: 'Philippines'
    },
    PK: {
        code: '92',
        name: 'Pakistan'
    },
    PL: {
        code: '48',
        name: 'Poland'
    },
    PM: {
        code: '508',
        name: 'St Pierre and Miquelon'
    },
    PR: {
        code: '1787',
        name: 'Puerto Rico'
    },
    PS: {
        code: '970, 972',
        name: 'Palestinian Territory'
    },
    PT: {
        code: '351',
        name: 'Portugal'
    },
    PW: {
        code: '680',
        name: 'Palau'
    },
    PY: {
        code: '595',
        name: 'Paraguay'
    },
    QA: {
        code: '974',
        name: 'Qatar'
    },
    RE: {
        code: '262',
        name: 'Reunion/Mayotte'
    },
    RO: {
        code: '40',
        name: 'Romania'
    },
    RS: {
        code: '381',
        name: 'Serbia'
    },
    RU: {
        code: '7',
        name: 'Russia/Kazakhstan'
    },
    RW: {
        code: '250',
        name: 'Rwanda'
    },
    SA: {
        code: '966',
        name: 'Saudi Arabia'
    },
    SB: {
        code: '677',
        name: 'Solomon Islands'
    },
    SC: {
        code: '248',
        name: 'Seychelles'
    },
    SD: {
        code: '249',
        name: 'Sudan'
    },
    SE: {
        code: '46',
        name: 'Sweden'
    },
    SG: {
        code: '65',
        name: 'Singapore'
    },
    SI: {
        code: '386',
        name: 'Slovenia'
    },
    SK: {
        code: '421',
        name: 'Slovakia'
    },
    SL: {
        code: '232',
        name: 'Sierra Leone'
    },
    SM: {
        code: '378',
        name: 'San Marino'
    },
    SN: {
        code: '221',
        name: 'Senegal'
    },
    SO: {
        code: '252',
        name: 'Somalia'
    },
    SR: {
        code: '597',
        name: 'Suriname'
    },
    SS: {
        code: '211',
        name: 'South Sudan'
    },
    ST: {
        code: '239',
        name: 'Sao Tome and Principe'
    },
    SV: {
        code: '503',
        name: 'El Salvador'
    },
    SY: {
        code: '963',
        name: 'Syria'
    },
    SZ: {
        code: '268',
        name: 'Swaziland'
    },
    TC: {
        code: '1649',
        name: 'Turks and Caicos Islands'
    },
    TD: {
        code: '235',
        name: 'Chad'
    },
    TG: {
        code: '228',
        name: 'Togo'
    },
    TH: {
        code: '66',
        name: 'Thailand'
    },
    TJ: {
        code: '992',
        name: 'Tajikistan'
    },
    TL: {
        code: '670',
        name: 'East Timor'
    },
    TM: {
        code: '993',
        name: 'Turkmenistan'
    },
    TN: {
        code: '216',
        name: 'Tunisia'
    },
    TO: {
        code: '676',
        name: 'Tonga'
    },
    TR: {
        code: '90',
        name: 'Turkiye'
    },
    TT: {
        code: '1868',
        name: 'Trinidad and Tobago'
    },
    TV: {
        code: '688',
        name: 'Tuvalu'
    },
    TW: {
        code: '886',
        name: 'Taiwan'
    },
    TZ: {
        code: '255',
        name: 'Tanzania'
    },
    UA: {
        code: '380',
        name: 'Ukraine'
    },
    UG: {
        code: '256',
        name: 'Uganda'
    },
    US: {
        code: '1',
        name: 'United States'
    },
    UY: {
        code: '598',
        name: 'Uruguay'
    },
    UZ: {
        code: '998',
        name: 'Uzbekistan'
    },
    VA: {
        code: '379',
        name: 'Vatican City'
    },
    VC: {
        code: '1784',
        name: 'St Vincent Grenadines'
    },
    VE: {
        code: '58',
        name: 'Venezuela'
    },
    VG: {
        code: '1284',
        name: 'Virgin Islands, British'
    },
    VI: {
        code: '1340',
        name: 'Virgin Islands, U.S.'
    },
    VN: {
        code: '84',
        name: 'Vietnam'
    },
    VU: {
        code: '678',
        name: 'Vanuatu'
    },
    WF: {
        code: '681',
        name: 'Wallis and Futuna'
    },
    WS: {
        code: '685',
        name: 'Samoa'
    },
    XK: {
        code: '383',
        name: 'Kosovo'
    },
    YE: {
        code: '967',
        name: 'Yemen'
    },
    ZA: {
        code: '27',
        name: 'South Africa'
    },
    ZM: {
        code: '260',
        name: 'Zambia'
    },
    ZW: {
        code: '263',
        name: 'Zimbabwe'
    }
};

const sendSmsOTP = async (client, { isoCountryCode, phoneNumber })=>{
    const core = getClient.getCore(client);
    const apiClient = createApiClient(client);
    const phoneCountryCode = supportedCountries[isoCountryCode].code;
    const { verificationUUID } = await apiClient.createSmsVerification({
        environmentId: core.environmentId,
        smsVerificationCreateRequest: {
            isoCountryCode,
            phoneCountryCode,
            phoneNumber
        }
    });
    return assignClient({
        isoCountryCode,
        phoneCountryCode,
        phoneNumber,
        verificationUUID
    }, client);
};

const verifyOTP = async (otpVerification, { verificationToken })=>{
    const client = getClient.getClient(otpVerification);
    const core = getClient.getCore(client);
    const apiClient = createApiClient(client);
    let response;
    const verifyRequest = {
        verificationToken,
        verificationUUID: otpVerification.verificationUUID
    };
    if (otpVerification.email) {
        response = await apiClient.signInWithEmailVerification({
            emailVerificationVerifyRequest: verifyRequest,
            environmentId: core.environmentId
        });
    } else {
        response = await apiClient.signInWithSmsVerification({
            environmentId: core.environmentId,
            smsVerificationVerifyRequest: verifyRequest
        });
    }
    const { user, minifiedJwt, expiresAt } = response;
    core.state.set({
        // Expires at is in seconds, so we need to convert it to milliseconds
        sessionExpiresAt: new Date(expiresAt * 1000),
        token: minifiedJwt,
        user
    });
    return user;
};

exports.BaseError = getClient.BaseError;
exports.offEvent = getClient.offEvent;
exports.onEvent = getClient.onEvent;
exports.onceEvent = getClient.onceEvent;
exports.ClientAlreadyInitializedError = ClientAlreadyInitializedError;
exports.createDynamicClient = createDynamicClient;
exports.hasExtension = hasExtension;
exports.initializeClient = initializeClient;
exports.logout = logout;
exports.sendEmailOTP = sendEmailOTP;
exports.sendSmsOTP = sendSmsOTP;
exports.verifyOTP = verifyOTP;
