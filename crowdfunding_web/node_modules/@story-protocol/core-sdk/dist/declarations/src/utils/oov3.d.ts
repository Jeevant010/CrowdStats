import { Address, Hex, PublicClient } from "viem";
import { ArbitrationPolicyUmaClient } from "../abi/generated.js";
export declare const getOov3Contract: (arbitrationPolicyUmaClient: ArbitrationPolicyUmaClient) => Promise<Address>;
export declare const getAssertionDetails: (rpcClient: PublicClient, arbitrationPolicyUmaClient: ArbitrationPolicyUmaClient, assertionId: Hex) => Promise<bigint>;
export declare const getMinimumBond: (rpcClient: PublicClient, arbitrationPolicyUmaClient: ArbitrationPolicyUmaClient, currency: Address) => Promise<bigint>;
/**
 * Settles an assertion associated with a dispute in the UMA arbitration protocol.
 *
 * This function takes a dispute ID, resolves it to an assertion ID, and then calls
 * the `settleAssertion` function on the Optimistic Oracle V3 contract to finalize
 * the arbitration outcome.
 *
 * The function is specifically designed for testing on the `aeneid` testnet and will
 * not work on other chains. It handles the entire settlement process including:
 * - Creating the appropriate clients with the provided private key
 * - Retrieving the assertion ID from the dispute ID
 * - Executing the settlement transaction
 * - Waiting for transaction confirmation
 *
 * @see https://docs.story.foundation/docs/uma-arbitration-policy#/
 * @see https://docs.uma.xyz/developers/optimistic-oracle-v3
 *
 * @param privateKey - The private key of the wallet that will sign the settlement transaction.
 * @param disputeId - The ID of the dispute to be settled.
 * @param transport - Optional custom RPC URL; defaults to the aeneid testnet RPC URL.
 * @returns A promise that resolves to the transaction hash of the settlement transaction.
 */
export declare const settleAssertion: (privateKey: Hex, disputeId: bigint, transport?: string) => Promise<Hex>;
//# sourceMappingURL=oov3.d.ts.map