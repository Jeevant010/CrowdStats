import { Address, Hash, PublicClient } from "viem";
import { EncodedTxData, SimpleWalletClient } from "../abi/generated.js";
export interface TokenClient {
    balanceOf(account: Address): Promise<bigint>;
    allowance(owner: string, spender: string): Promise<bigint>;
    approve(spender: string, value: bigint): Promise<Hash>;
    approveEncode(spender: Address, value: bigint): EncodedTxData;
}
export declare class ERC20Client implements TokenClient {
    private ercClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address: Address);
    balanceOf(account: Address): Promise<bigint>;
    allowance(owner: Address, spender: Address): Promise<bigint>;
    approve(spender: Address, value: bigint): Promise<Hash>;
    approveEncode(spender: Address, value: bigint): EncodedTxData;
    mint(to: Address, amount: bigint): Promise<Hash>;
}
export declare class WipTokenClient implements TokenClient {
    private wipClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient);
    balanceOf(account: Address): Promise<bigint>;
    allowance(owner: Address, spender: Address): Promise<bigint>;
    approve(spender: Address, value: bigint): Promise<Hash>;
    approveEncode(spender: Address, value: bigint): EncodedTxData;
    depositEncode(): EncodedTxData;
    get address(): Address;
}
//# sourceMappingURL=token.d.ts.map