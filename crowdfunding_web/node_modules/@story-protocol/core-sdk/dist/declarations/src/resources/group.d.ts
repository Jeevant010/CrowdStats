import { PublicClient } from "viem";
import { CoreMetadataModuleClient, GroupingModuleClient, GroupingModuleEventClient, GroupingWorkflowsClient, IpAssetRegistryClient, LicenseRegistryReadOnlyClient, LicenseTokenReadOnlyClient, LicensingModuleClient, PiLicenseTemplateClient, RoyaltyModuleEventClient, SimpleWalletClient } from "../abi/generated.js";
import { ChainIds } from "../types/config.js";
import { TransactionResponse } from "../types/options.js";
import { AddIpRequest, ClaimRewardRequest, ClaimRewardResponse, CollectAndDistributeGroupRoyaltiesRequest, CollectAndDistributeGroupRoyaltiesResponse, CollectRoyaltiesRequest, CollectRoyaltiesResponse, GetClaimableRewardRequest, MintAndRegisterIpAndAttachLicenseAndAddToGroupRequest, MintAndRegisterIpAndAttachLicenseAndAddToGroupResponse, RegisterGroupAndAttachLicenseAndAddIpsRequest, RegisterGroupAndAttachLicenseAndAddIpsResponse, RegisterGroupAndAttachLicenseRequest, RegisterGroupAndAttachLicenseResponse, RegisterGroupRequest, RegisterGroupResponse, RegisterIpAndAttachLicenseAndAddToGroupRequest, RegisterIpAndAttachLicenseAndAddToGroupResponse, RemoveIpsFromGroupRequest } from "../types/resources/group.js";
export declare class GroupClient {
    groupingWorkflowsClient: GroupingWorkflowsClient;
    groupingModuleEventClient: GroupingModuleEventClient;
    groupingModuleClient: GroupingModuleClient;
    licenseTemplateClient: PiLicenseTemplateClient;
    licenseTokenReadOnlyClient: LicenseTokenReadOnlyClient;
    ipAssetRegistryClient: IpAssetRegistryClient;
    coreMetadataModuleClient: CoreMetadataModuleClient;
    licensingModuleClient: LicensingModuleClient;
    licenseRegistryReadOnlyClient: LicenseRegistryReadOnlyClient;
    royaltyModuleEventClient: RoyaltyModuleEventClient;
    private readonly rpcClient;
    private readonly wallet;
    private readonly chainId;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, chainId: ChainIds);
    /** Registers a Group IPA.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L14 | `IPGroupRegistered`} event.
     */
    registerGroup(request: RegisterGroupRequest): Promise<RegisterGroupResponse>;
    /** Mint an NFT from a SPGNFT collection, register it with metadata as an IP, attach license terms to the registered IP, and add it to a group IP.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    mintAndRegisterIpAndAttachLicenseAndAddToGroup(request: MintAndRegisterIpAndAttachLicenseAndAddToGroupRequest): Promise<MintAndRegisterIpAndAttachLicenseAndAddToGroupResponse>;
    /** Register an NFT as IP with metadata, attach license terms to the registered IP, and add it to a group IP.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    registerIpAndAttachLicenseAndAddToGroup(request: RegisterIpAndAttachLicenseAndAddToGroupRequest): Promise<RegisterIpAndAttachLicenseAndAddToGroupResponse>;
    /** Register a group IP with a group reward pool and attach license terms to the group IP.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L14 | `IPGroupRegistered`} event.
     */
    registerGroupAndAttachLicense(request: RegisterGroupAndAttachLicenseRequest): Promise<RegisterGroupAndAttachLicenseResponse>;
    /** Register a group IP with a group reward pool, attach license terms to the group IP, and add individual IPs to the group IP.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L14 | `IPGroupRegistered`} event.
     */
    registerGroupAndAttachLicenseAndAddIps(request: RegisterGroupAndAttachLicenseAndAddIpsRequest): Promise<RegisterGroupAndAttachLicenseAndAddIpsResponse>;
    /**
     * Collect royalties for the entire group and distribute the rewards to each member IP's royalty vault.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L38 | `CollectedRoyaltiesToGroupPool`} event.
     */
    collectAndDistributeGroupRoyalties({ groupIpId, currencyTokens, memberIpIds, txOptions, }: CollectAndDistributeGroupRoyaltiesRequest): Promise<CollectAndDistributeGroupRoyaltiesResponse>;
    /**
     * Adds IPs to group.
     * The function must be called by the Group IP owner or an authorized operator.
     */
    addIpsToGroup({ groupIpId, ipIds, maxAllowedRewardSharePercentage, txOptions, }: AddIpRequest): Promise<TransactionResponse>;
    /**
     * Returns the available reward for each IP in the group.
     */
    getClaimableReward({ groupIpId, currencyToken, memberIpIds, }: GetClaimableRewardRequest): Promise<bigint[]>;
    /**
     * Removes IPs from group.
     * The function must be called by the Group IP owner or an authorized operator.
     */
    removeIpsFromGroup({ groupIpId, ipIds, txOptions, }: RemoveIpsFromGroupRequest): Promise<TransactionResponse>;
    /**
     * Claims reward.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L31 | `ClaimedReward`} event.
     */
    claimReward({ groupIpId, currencyToken, memberIpIds, txOptions, }: ClaimRewardRequest): Promise<ClaimRewardResponse>;
    /**
     * Collects royalties into the pool, making them claimable by group member IPs.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/grouping/IGroupingModule.sol#L38 | `CollectedRoyaltiesToGroupPool`} event.
     */
    collectRoyalties({ groupIpId, currencyToken, txOptions, }: CollectRoyaltiesRequest): Promise<CollectRoyaltiesResponse>;
    private getLicenseData;
}
//# sourceMappingURL=group.d.ts.map