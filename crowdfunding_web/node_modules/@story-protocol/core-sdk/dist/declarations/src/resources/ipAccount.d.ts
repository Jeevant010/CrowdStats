import { Address, Hex, PublicClient } from "viem";
import { Erc20Client, SimpleWalletClient, WrappedIpClient } from "../abi/generated.js";
import { ChainIds } from "../types/config.js";
import { TransactionResponse } from "../types/options.js";
import { IPAccountExecuteRequest, IPAccountExecuteResponse, IPAccountExecuteWithSigRequest, IPAccountExecuteWithSigResponse, IpAccountStateResponse, SetIpMetadataRequest, TokenResponse, TransferErc20Request } from "../types/resources/ipAccount.js";
export declare class IPAccountClient {
    wrappedIpClient: WrappedIpClient;
    erc20Client: Erc20Client;
    private readonly wallet;
    private readonly rpcClient;
    private readonly chainId;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, chainId: ChainIds);
    /**
     * Executes a transaction from the IP Account.
     */
    execute(request: IPAccountExecuteRequest): Promise<IPAccountExecuteResponse>;
    /**
     * Executes a transaction from the IP Account with a signature.
     */
    executeWithSig(request: IPAccountExecuteWithSigRequest): Promise<IPAccountExecuteWithSigResponse>;
    /**
     * Returns the IPAccount's internal nonce for transaction ordering.
     */
    getIpAccountNonce(ipId: Address): Promise<IpAccountStateResponse>;
    /**
     * Returns the identifier of the non-fungible token which owns the account
     */
    getToken(ipId: Address): Promise<TokenResponse>;
    /**
     * Sets the metadataURI for an IP asset.
     */
    setIpMetadata({ ipId, metadataURI, metadataHash, txOptions, }: SetIpMetadataRequest): Promise<Hex>;
    /**
     * Transfers ERC20 tokens from the IP Account to the target address.
     */
    transferErc20({ ipId, tokens, txOptions, }: TransferErc20Request): Promise<TransactionResponse>;
}
//# sourceMappingURL=ipAccount.d.ts.map