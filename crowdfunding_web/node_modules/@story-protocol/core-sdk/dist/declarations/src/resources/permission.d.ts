import { PublicClient } from "viem";
import { AccessControllerClient, CoreMetadataModuleClient, IpAssetRegistryClient, SimpleWalletClient } from "../abi/generated.js";
import { ChainIds } from "../types/config.js";
import { CreateBatchPermissionSignatureRequest, CreateSetPermissionSignatureRequest, SetAllPermissionsRequest, SetBatchPermissionsRequest, SetPermissionsRequest, SetPermissionsResponse } from "../types/resources/permission.js";
export declare class PermissionClient {
    accessControllerClient: AccessControllerClient;
    ipAssetRegistryClient: IpAssetRegistryClient;
    coreMetadataModuleClient: CoreMetadataModuleClient;
    private readonly wallet;
    private readonly rpcClient;
    private readonly chainId;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, chainId: ChainIds);
    /**
     * Sets the permission for a specific function call.
     * Each policy is represented as a mapping from an IP account address to a signer address to a recipient
     * address to a function selector to a permission level. The permission level is an enum of `AccessPermission`.
     * By default, all policies are set to ABSTAIN, which means that the permission is not set.
     * The owner of ipAccount by default has all permission.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/access/IAccessController.sol#L13 | `PermissionSet`} event.
     */
    setPermission(request: SetPermissionsRequest): Promise<SetPermissionsResponse>;
    /**
     * Specific permission overrides wildcard permission with signature.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/access/IAccessController.sol#L13 | `PermissionSet`} event.
     */
    createSetPermissionSignature(request: CreateSetPermissionSignatureRequest): Promise<SetPermissionsResponse>;
    /**
     * Sets permission to a signer for all functions across all modules.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/access/IAccessController.sol#L13 | `PermissionSet`} event.
     */
    setAllPermissions(request: SetAllPermissionsRequest): Promise<SetPermissionsResponse>;
    /**
     * Sets a batch of permissions in a single transaction.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/access/IAccessController.sol#L13 | `PermissionSet`} event.
     */
    setBatchPermissions(request: SetBatchPermissionsRequest): Promise<SetPermissionsResponse>;
    /**
     * Sets a batch of permissions in a single transaction with signature.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/access/IAccessController.sol#L13 | `PermissionSet`} event.
     */
    createBatchPermissionSignature(request: CreateBatchPermissionSignatureRequest): Promise<SetPermissionsResponse>;
    private checkIsRegistered;
}
//# sourceMappingURL=permission.d.ts.map