import { Hex, PublicClient } from "viem";
import { AccessControllerClient, CoreMetadataModuleClient, DerivativeWorkflowsClient, IpAssetRegistryClient, LicenseAttachmentWorkflowsClient, LicenseRegistryReadOnlyClient, LicenseTokenReadOnlyClient, LicensingModuleClient, Multicall3Client, PiLicenseTemplateClient, RegistrationWorkflowsClient, RoyaltyModuleEventClient, RoyaltyTokenDistributionWorkflowsClient, SimpleWalletClient, SpgnftImplReadOnlyClient, WrappedIpClient } from "../abi/generated.js";
import { ChainIds } from "../types/config.js";
import { BatchMintAndRegisterIpAndMakeDerivativeRequest, BatchMintAndRegisterIpAndMakeDerivativeResponse, BatchMintAndRegisterIpAssetWithPilTermsRequest, BatchMintAndRegisterIpAssetWithPilTermsResponse, BatchRegisterDerivativeRequest, BatchRegisterDerivativeResponse, BatchRegisterIpAssetsWithOptimizedWorkflowsRequest, BatchRegisterIpAssetsWithOptimizedWorkflowsResponse, BatchRegisterRequest, BatchRegisterResponse, MintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokensRequest, MintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokensResponse, MintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest, MintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensResponse, MintAndRegisterIpAndMakeDerivativeRequest, MintAndRegisterIpAndMakeDerivativeResponse, MintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest, MintAndRegisterIpAssetWithPilTermsRequest, MintAndRegisterIpAssetWithPilTermsResponse, MintAndRegisterIpRequest, RegisterDerivativeAndAttachLicenseTermsAndDistributeRoyaltyTokensRequest, RegisterDerivativeAndAttachLicenseTermsAndDistributeRoyaltyTokensResponse, RegisterDerivativeRequest, RegisterDerivativeResponse, RegisterDerivativeWithLicenseTokensRequest, RegisterDerivativeWithLicenseTokensResponse, RegisterIPAndAttachLicenseTermsAndDistributeRoyaltyTokensRequest, RegisterIPAndAttachLicenseTermsAndDistributeRoyaltyTokensResponse, RegisterIpAndAttachPilTermsRequest, RegisterIpAndAttachPilTermsResponse, RegisterIpAndMakeDerivativeRequest, RegisterIpAndMakeDerivativeResponse, RegisterIpAndMakeDerivativeWithLicenseTokensRequest, RegisterIpResponse, RegisterPilTermsAndAttachRequest, RegisterPilTermsAndAttachResponse, RegisterRequest } from "../types/resources/ipAsset.js";
import { IpCreator, IpMetadata } from "../types/resources/ipMetadata.js";
export declare class IPAssetClient {
    licensingModuleClient: LicensingModuleClient;
    ipAssetRegistryClient: IpAssetRegistryClient;
    licenseTemplateClient: PiLicenseTemplateClient;
    licenseRegistryReadOnlyClient: LicenseRegistryReadOnlyClient;
    licenseTokenReadOnlyClient: LicenseTokenReadOnlyClient;
    accessControllerClient: AccessControllerClient;
    coreMetadataModuleClient: CoreMetadataModuleClient;
    registrationWorkflowsClient: RegistrationWorkflowsClient;
    licenseAttachmentWorkflowsClient: LicenseAttachmentWorkflowsClient;
    derivativeWorkflowsClient: DerivativeWorkflowsClient;
    multicall3Client: Multicall3Client;
    royaltyTokenDistributionWorkflowsClient: RoyaltyTokenDistributionWorkflowsClient;
    royaltyModuleEventClient: RoyaltyModuleEventClient;
    wipClient: WrappedIpClient;
    spgNftClient: SpgnftImplReadOnlyClient;
    private readonly rpcClient;
    private readonly wallet;
    private readonly chainId;
    private readonly walletAddress;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, chainId: ChainIds);
    generateCreatorMetadata(creator: IpCreator): IpCreator;
    generateIpMetadata(metadata: IpMetadata): IpMetadata;
    /**
     * Registers an NFT as IP, creating a corresponding IP record.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    register(request: RegisterRequest): Promise<RegisterIpResponse>;
    /**
     * Batch registers an NFT as IP, creating a corresponding IP record.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    batchRegister(request: BatchRegisterRequest): Promise<BatchRegisterResponse>;
    /**
     * Registers a derivative directly with parent IP's license terms, without needing license tokens,
     * and attaches the license terms of the parent IPs to the derivative IP.
     * The license terms must be attached to the parent IP before calling this function.
     * All IPs attached default license terms by default.
     * The derivative IP owner must be the caller or an authorized operator.
     */
    registerDerivative(request: RegisterDerivativeRequest): Promise<RegisterDerivativeResponse>;
    /**
     * Batch registers a derivative directly with parent IP's license terms.
     */
    batchRegisterDerivative(request: BatchRegisterDerivativeRequest): Promise<BatchRegisterDerivativeResponse>;
    /**
     * Registers a derivative with license tokens. The derivative IP is registered with license tokens minted from the parent IP's license terms.
     * The license terms of the parent IPs issued with license tokens are attached to the derivative IP.
     * The caller must be the derivative IP owner or an authorized operator.
     */
    registerDerivativeWithLicenseTokens(request: RegisterDerivativeWithLicenseTokensRequest): Promise<RegisterDerivativeWithLicenseTokensResponse>;
    /**
     * Mint an NFT from a collection and register it as an IP.
     *
     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicensingModule.sol#L19 | `LicenseTermsAttached`} events.
     */
    mintAndRegisterIpAssetWithPilTerms(request: MintAndRegisterIpAssetWithPilTermsRequest): Promise<MintAndRegisterIpAssetWithPilTermsResponse>;
    /**
     * Batch mint an NFT from a collection and register it as an IP.
     *
     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicensingModule.sol#L19 | `LicenseTermsAttached`} events.
     */
    batchMintAndRegisterIpAssetWithPilTerms(request: BatchMintAndRegisterIpAssetWithPilTermsRequest): Promise<BatchMintAndRegisterIpAssetWithPilTermsResponse>;
    /**
     * Register a given NFT as an IP and attach Programmable IP License Terms.
     *
     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicensingModule.sol#L19 | `LicenseTermsAttached`} events.
     */
    registerIpAndAttachPilTerms(request: RegisterIpAndAttachPilTermsRequest): Promise<RegisterIpAndAttachPilTermsResponse>;
    /**
     * Register the given NFT as a derivative IP with metadata without using license tokens.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    registerDerivativeIp(request: RegisterIpAndMakeDerivativeRequest): Promise<RegisterIpAndMakeDerivativeResponse>;
    /**
     * Mint an NFT from a collection and register it as a derivative IP without license tokens.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    mintAndRegisterIpAndMakeDerivative(request: MintAndRegisterIpAndMakeDerivativeRequest): Promise<MintAndRegisterIpAndMakeDerivativeResponse>;
    /**
     * Batch mint an NFT from a collection and register it as a derivative IP without license tokens.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    batchMintAndRegisterIpAndMakeDerivative(request: BatchMintAndRegisterIpAndMakeDerivativeRequest): Promise<BatchMintAndRegisterIpAndMakeDerivativeResponse>;
    /**
     * Mint an NFT from a SPGNFT collection and register it with metadata as an IP.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    mintAndRegisterIp(request: MintAndRegisterIpRequest): Promise<RegisterIpResponse>;
    /**
     * Register Programmable IP License Terms (if unregistered) and attach it to IP.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicensingModule.sol#L19 | `LicenseTermsAttached`} event.
     */
    registerPilTermsAndAttach(request: RegisterPilTermsAndAttachRequest): Promise<RegisterPilTermsAndAttachResponse>;
    /**
     * Mint an NFT from a collection and register it as a derivative IP using license tokens.
     * Requires caller to have the minter role or the SPG NFT to allow public minting. Caller must own the license tokens and have approved DerivativeWorkflows to transfer them.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    mintAndRegisterIpAndMakeDerivativeWithLicenseTokens(request: MintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest): Promise<RegisterIpResponse>;
    /**
     * Register the given NFT as a derivative IP using license tokens.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    registerIpAndMakeDerivativeWithLicenseTokens(request: RegisterIpAndMakeDerivativeWithLicenseTokensRequest): Promise<RegisterIpResponse>;
    /**
     * Register the given NFT and attach license terms and distribute royalty
     * tokens. In order to successfully distribute royalty tokens, the first
     * license terms attached to the IP must be a commercial license.
     *
     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/royalty/IRoyaltyModule.sol#L88 | `IpRoyaltyVaultDeployed`} events.
     */
    registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens(request: RegisterIPAndAttachLicenseTermsAndDistributeRoyaltyTokensRequest): Promise<RegisterIPAndAttachLicenseTermsAndDistributeRoyaltyTokensResponse>;
    /**
     * Register the given NFT as a derivative IP and attach license terms and distribute royalty tokens.  In order to successfully distribute royalty tokens, the license terms attached to the IP must be
     * a commercial license.
     *
     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/royalty/IRoyaltyModule.sol#L88| `IpRoyaltyVaultDeployed`} events.
     */
    registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens(request: RegisterDerivativeAndAttachLicenseTermsAndDistributeRoyaltyTokensRequest): Promise<RegisterDerivativeAndAttachLicenseTermsAndDistributeRoyaltyTokensResponse>;
    /**
     * Mint an NFT and register the IP, attach PIL terms, and distribute royalty tokens.
     *
     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} and {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/royalty/IRoyaltyModule.sol#L88| `IpRoyaltyVaultDeployed`} events.
     */
    mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(request: MintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokensRequest): Promise<MintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokensResponse>;
    /**
     * Mint an NFT and register the IP, make a derivative, and distribute royalty tokens.
     *
     * Emits on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/registries/IIPAssetRegistry.sol#L17 | `IPRegistered`} event.
     */
    mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(request: MintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest): Promise<MintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensResponse>;
    private distributeRoyaltyTokens;
    isRegistered(ipId: Hex): Promise<boolean>;
    /**
     * Batch register multiple IP assets in optimized transactions, supporting various registration methods:
     * - {@link mintAndRegisterIpAndMakeDerivative}
     * - {@link mintAndRegisterIpAssetWithPilTerms}
     * - {@link mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens}
     * - {@link mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens}
     * - {@link registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens}
     * - {@link registerIpAndAttachPilTerms}
     * - {@link registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens}
     * - {@link registerDerivativeIp}
     *
     * This method optimizes transaction processing by:
     * 1. Transforming all requests into appropriate workflow formats
     * 2. Grouping related workflow requests together
     * 3. Intelligently selecting between multicall3 and SPG's multicall based on compatibility
     *
     * The batching strategy significantly reduces gas costs and improves transaction throughput
     * by minimizing the number of separate blockchain transactions. It also handles complex
     * workflows like royalty token distribution automatically.
     *
     * The method supports automatic token handling for minting fees:
     * - If the wallet's IP token balance is insufficient to cover minting fees, it automatically wraps native IP tokens into WIP tokens.
     * - It checks allowances for all required spenders and automatically approves them if their current allowance is lower than needed.
     * - These automatic processes can be configured through the `wipOptions` parameter to control behavior like multicall usage and approval settings.
     *
     * @remark Multicall selection logic:
     *
     * 1. For `mintAndRegister*` methods:
     *    - When `spgNftContract` has public minting disabled: Uses SPG's multicall
     *    - When `spgNftContract` has public minting enabled: Uses multicall3
     *    - Exception: {@link mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens} always uses
     *      SPG's multicall due to contract logic
     *
     * 2. For `register*` methods:
     *    - Always uses SPG's multicall for batching registration operations
     */
    batchRegisterIpAssetsWithOptimizedWorkflows(request: BatchRegisterIpAssetsWithOptimizedWorkflowsRequest): Promise<BatchRegisterIpAssetsWithOptimizedWorkflowsResponse>;
    private getLicenseTermsId;
    private validateLicenseTokenIds;
    private getIpIdAndTokenIdsFromEvent;
    private handleRegistrationWithFees;
}
//# sourceMappingURL=ipAsset.d.ts.map