import { Hex, PublicClient } from "viem";
import { ArbitrationPolicyUmaClient, DisputeModuleClient, Multicall3Client, SimpleWalletClient, WrappedIpClient } from "../abi/generated.js";
import { ChainIds } from "../types/config.js";
import { TransactionResponse } from "../types/options.js";
import { CancelDisputeRequest, CancelDisputeResponse, DisputeAssertionRequest, RaiseDisputeRequest, RaiseDisputeResponse, ResolveDisputeRequest, ResolveDisputeResponse, TagIfRelatedIpInfringedRequest } from "../types/resources/dispute.js";
export declare class DisputeClient {
    disputeModuleClient: DisputeModuleClient;
    arbitrationPolicyUmaClient: ArbitrationPolicyUmaClient;
    multicall3Client: Multicall3Client;
    wrappedIpClient: WrappedIpClient;
    private readonly rpcClient;
    private readonly chainId;
    private readonly wallet;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, chainId: ChainIds);
    /**
     * Raises a dispute on a given ipId.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/dispute/IDisputeModule.sol#L64 | `DisputeRaised`} event.
     */
    raiseDispute(request: RaiseDisputeRequest): Promise<RaiseDisputeResponse>;
    /**
     * Cancels an ongoing dispute
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/dispute/IDisputeModule.sol#L84 | `DisputeCancelled`} event.
     */
    cancelDispute(request: CancelDisputeRequest): Promise<CancelDisputeResponse>;
    /**
     * Resolves a dispute after it has been judged.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/dispute/IDisputeModule.sol#L104 | `DisputeResolved`} event.
     */
    resolveDispute(request: ResolveDisputeRequest): Promise<ResolveDisputeResponse>;
    /**
     * Tags a derivative if a parent has been tagged with an infringement tag
     * or a group ip if a group member has been tagged with an infringement tag.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/dispute/IDisputeModule.sol#L93 | `IpTaggedOnRelatedIpInfringement`} event.
     */
    tagIfRelatedIpInfringed(request: TagIfRelatedIpInfringedRequest): Promise<TransactionResponse[]>;
    /**
     * Counters a dispute that was raised by another party on an IP using counter evidence.
     * The counter evidence (e.g., documents, images) should be uploaded to IPFS,
     * and its corresponding CID is converted to a hash for the request.
     *
     * @remarks
     *  The liveness period is split in two parts:
     *  - the first part of the liveness period in which only the IP's owner can be called the method.
     *  - a second part in which any address can be called the method.
     *
     * If you only have a `disputeId`, call {@link disputeIdToAssertionId} to get the `assertionId` needed here.
     */
    disputeAssertion(request: DisputeAssertionRequest): Promise<TransactionResponse>;
    disputeIdToAssertionId(disputeId: number | bigint): Promise<Hex>;
}
//# sourceMappingURL=dispute.d.ts.map