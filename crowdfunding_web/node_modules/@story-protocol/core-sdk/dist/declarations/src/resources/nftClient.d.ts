import { Address, PublicClient } from "viem";
import { RegistrationWorkflowsClient, SimpleWalletClient } from "../abi/generated.js";
import { TransactionResponse } from "../types/options.js";
import { CreateNFTCollectionRequest, CreateNFTCollectionResponse, GetTokenURIRequest, SetTokenURIRequest } from "../types/resources/nftClient.js";
export declare class NftClient {
    registrationWorkflowsClient: RegistrationWorkflowsClient;
    private readonly rpcClient;
    private readonly wallet;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient);
    /**
     * Creates a new SPG NFT Collection.
     *
     * Emits an on-chain `CollectionCreated` event.
     * @see {@link https://github.com/storyprotocol/protocol-periphery-v1/blob/v1.3.1/contracts/interfaces/workflows/IRegistrationWorkflows.sol#L12 | IRegistrationWorkflows}
     */
    createNFTCollection(request: CreateNFTCollectionRequest): Promise<CreateNFTCollectionResponse>;
    /**
     * Returns the current mint token of the collection.
     */
    getMintFeeToken(spgNftContract: Address): Promise<Address>;
    /**
     * Returns the current mint fee of the collection.
     */
    getMintFee(spgNftContract: Address): Promise<bigint>;
    /**
     * Sets the token URI for a specific token id.
     *
     * @remarks
     * Only callable by the owner of the token.
     */
    setTokenURI({ tokenId, tokenURI, spgNftContract, txOptions, }: SetTokenURIRequest): Promise<TransactionResponse>;
    /**
     * Returns the token URI for a specific token id.
     */
    getTokenURI({ tokenId, spgNftContract }: GetTokenURIRequest): Promise<string>;
}
//# sourceMappingURL=nftClient.d.ts.map