import { PublicClient } from "viem";
import { IpAssetRegistryClient, LicenseRegistryReadOnlyClient, LicensingModuleClient, LicensingModulePredictMintingLicenseFeeResponse, ModuleRegistryReadOnlyClient, Multicall3Client, PiLicenseTemplateClient, PiLicenseTemplateGetLicenseTermsResponse, PiLicenseTemplateReadOnlyClient, SimpleWalletClient, WrappedIpClient } from "../abi/generated.js";
import { LicensingConfig } from "../types/common.js";
import { ChainIds } from "../types/config.js";
import { AttachLicenseTermsRequest, AttachLicenseTermsResponse, GetLicensingConfigRequest, LicenseTermsId, MintLicenseTokensRequest, MintLicenseTokensResponse, PredictMintingLicenseFeeRequest, RegisterCommercialRemixPILRequest, RegisterCommercialUsePILRequest, RegisterCreativeCommonsAttributionPILRequest, RegisterNonComSocialRemixingPILRequest, RegisterPILResponse, RegisterPILTermsRequest, SetLicensingConfigRequest, SetLicensingConfigResponse } from "../types/resources/license.js";
export declare class LicenseClient {
    licensingModuleClient: LicensingModuleClient;
    ipAssetRegistryClient: IpAssetRegistryClient;
    piLicenseTemplateReadOnlyClient: PiLicenseTemplateReadOnlyClient;
    licenseTemplateClient: PiLicenseTemplateClient;
    licenseRegistryReadOnlyClient: LicenseRegistryReadOnlyClient;
    moduleRegistryReadOnlyClient: ModuleRegistryReadOnlyClient;
    multicall3Client: Multicall3Client;
    wipClient: WrappedIpClient;
    private readonly rpcClient;
    private readonly wallet;
    private readonly chainId;
    private readonly walletAddress;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, chainId: ChainIds);
    /**
     * Registers new license terms and return the ID of the newly registered license terms.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicenseTemplate.sol#L19 | `LicenseTermsRegistered`} event.
     */
    registerPILTerms(request: RegisterPILTermsRequest): Promise<RegisterPILResponse>;
    /**
     * Convenient function to register a PIL non commercial social remix license to the registry
     *
     * For more details, see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#flavor-%231%3A-non-commercial-social-remixing | Non Commercial Social Remixing}.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicenseTemplate.sol#L19 | `LicenseTermsRegistered`} event.
     */
    registerNonComSocialRemixingPIL(request?: RegisterNonComSocialRemixingPILRequest): Promise<RegisterPILResponse>;
    /**
     * Convenient function to register a PIL commercial use license to the registry.
     *
     * For more details, see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#flavor-%232%3A-commercial-use | Commercial Use}.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicenseTemplate.sol#L19 | `LicenseTermsRegistered`} event.
     */
    registerCommercialUsePIL(request: RegisterCommercialUsePILRequest): Promise<RegisterPILResponse>;
    /**
     * Convenient function to register a PIL commercial Remix license to the registry.
     *
     * For more details, see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#flavor-%233%3A-commercial-remix | Commercial Remix }.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicenseTemplate.sol#L19 | `LicenseTermsRegistered`} event.
     */
    registerCommercialRemixPIL(request: RegisterCommercialRemixPILRequest): Promise<RegisterPILResponse>;
    /**
     * Convenient function to register a PIL creative commons attribution license to the registry.
     * Creates a Creative Commons Attribution (CC-BY) license terms flavor.
     *
     * For more details, see {@link https://docs.story.foundation/concepts/programmable-ip-license/pil-flavors#flavor-%234%3A-creative-commons-attribution | Creative Commons Attribution}.
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicenseTemplate.sol#L19 | `LicenseTermsRegistered`} event.
     */
    registerCreativeCommonsAttributionPIL({ currency, royaltyPolicyAddress, txOptions, }: RegisterCreativeCommonsAttributionPILRequest): Promise<RegisterPILResponse>;
    /**
     * Attaches license terms to an IP.
     */
    attachLicenseTerms(request: AttachLicenseTermsRequest): Promise<AttachLicenseTermsResponse>;
    /**
     * Mints license tokens for the license terms attached to an IP.
     * It might require the caller pay the minting fee, depending on the license terms or configured by the iP owner.
     * The minting fee is paid in the minting fee token specified in the license terms or configured by the IP owner.
     * IP owners can configure the minting fee of their IPs or configure the minting fee module to determine the minting fee.
     *
     * @remarks
     * Before minting license tokens, the license terms must be attached to the IP, with two exceptions:
     * 1. Default license terms can be minted without explicit attachment since they are automatically
     *    attached to all IPs by default
     * 2. IP owners have special privileges and can mint license tokens for their own IPs using any
     *    license terms, even if those terms are not explicitly attached
     *
     * Emits an on-chain {@link https://github.com/storyprotocol/protocol-core-v1/blob/v1.3.1/contracts/interfaces/modules/licensing/ILicensingModule.sol#L34 | `LicenseTokensMinted`} event.
     */
    mintLicenseTokens(request: MintLicenseTokensRequest): Promise<MintLicenseTokensResponse>;
    /**
     * Gets license terms of the given ID.
     */
    getLicenseTerms(selectedLicenseTermsId: LicenseTermsId): Promise<PiLicenseTemplateGetLicenseTermsResponse>;
    /**
     * Pre-compute the minting license fee for the given IP and license terms. The function can be used to calculate the minting license fee before minting license tokens.
     */
    predictMintingLicenseFee(request: PredictMintingLicenseFeeRequest): Promise<LicensingModulePredictMintingLicenseFeeResponse>;
    /**
     * Sets the licensing configuration for a specific license terms of an IP. If both licenseTemplate and licenseTermsId are not specified then the licensing config apply to all licenses of given IP.
     */
    setLicensingConfig(request: SetLicensingConfigRequest): Promise<SetLicensingConfigResponse>;
    getLicensingConfig(request: GetLicensingConfigRequest): Promise<LicensingConfig>;
    private getLicenseTermsId;
    private registerPILTermsHelper;
}
//# sourceMappingURL=license.d.ts.map