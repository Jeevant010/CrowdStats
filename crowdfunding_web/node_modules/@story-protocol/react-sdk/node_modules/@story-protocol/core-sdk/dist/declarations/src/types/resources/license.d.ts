import { Address } from "viem";
import { TxOptions } from "../options.js";
import { EncodedTxData } from "../../abi/generated.js";
export type LicenseApiResponse = {
    data: License;
};
export type License = {
    id: string;
    policyId: string;
    licensorIpId: Address;
};
export type RegisterNonComSocialRemixingPILRequest = {
    txOptions?: TxOptions;
};
/**
 * This structure defines the terms for a Programmable IP License (PIL). These terms can be attached to IP Assets. The legal document of the PIL can be found in this repository.
 * @type LicenseTerms
 **/
export type LicenseTerms = {
    transferable: boolean;
    royaltyPolicy: Address;
    defaultMintingFee: bigint;
    expiration: bigint;
    commercialUse: boolean;
    commercialAttribution: boolean;
    commercializerChecker: Address;
    commercializerCheckerData: Address;
    commercialRevShare: number;
    commercialRevCeiling: bigint;
    derivativesAllowed: boolean;
    derivativesAttribution: boolean;
    derivativesApproval: boolean;
    derivativesReciprocal: boolean;
    derivativeRevCeiling: bigint;
    currency: Address;
    uri: string;
};
export type RegisterPILTermsRequest = Omit<LicenseTerms, "defaultMintingFee" | "expiration" | "commercialRevCeiling" | "derivativeRevCeiling"> & {
    defaultMintingFee: bigint | string | number;
    expiration: bigint | string | number;
    commercialRevCeiling: bigint | string | number;
    derivativeRevCeiling: bigint | string | number;
    txOptions?: TxOptions;
};
export type LicenseTermsIdResponse = bigint;
export type RegisterPILResponse = {
    licenseTermsId?: bigint;
    txHash?: string;
    encodedTxData?: EncodedTxData;
};
export type RegisterCommercialUsePILRequest = {
    defaultMintingFee: string | number | bigint;
    currency: Address;
    txOptions?: TxOptions;
};
export type RegisterCommercialRemixPILRequest = {
    defaultMintingFee: string | number | bigint;
    commercialRevShare: number;
    currency: Address;
    txOptions?: TxOptions;
};
export type AttachLicenseTermsRequest = {
    ipId: Address;
    licenseTermsId: string | number | bigint;
    licenseTemplate?: Address;
    txOptions?: TxOptions;
};
export type AttachLicenseTermsResponse = {
    txHash?: string;
    encodedTxData?: EncodedTxData;
    success?: boolean;
};
export type MintLicenseTokensRequest = {
    licensorIpId: Address;
    licenseTermsId: string | number | bigint;
    licenseTemplate?: Address;
    amount?: number | string | bigint;
    receiver?: Address;
    txOptions?: TxOptions;
};
export type MintLicenseTokensResponse = {
    licenseTokenIds?: bigint[];
    txHash?: string;
    encodedTxData?: EncodedTxData;
};
export declare enum PIL_TYPE {
    NON_COMMERCIAL_REMIX = 0,
    COMMERCIAL_USE = 1,
    COMMERCIAL_REMIX = 2
}
export type LicenseTermsId = string | number | bigint;
//# sourceMappingURL=license.d.ts.map