import { PublicClient } from "viem";
import { IpAssetRegistryClient, LicenseRegistryEventClient, LicenseRegistryReadOnlyClient, LicensingModuleClient, PiLicenseTemplateClient, PiLicenseTemplateGetLicenseTermsResponse, PiLicenseTemplateReadOnlyClient, RoyaltyModuleReadOnlyClient, RoyaltyPolicyLapClient, SimpleWalletClient } from "../abi/generated.js";
import { RegisterNonComSocialRemixingPILRequest, RegisterPILResponse, RegisterCommercialUsePILRequest, RegisterCommercialRemixPILRequest, AttachLicenseTermsRequest, MintLicenseTokensRequest, MintLicenseTokensResponse, AttachLicenseTermsResponse, LicenseTermsId, RegisterPILTermsRequest } from "../types/resources/license.js";
export declare class LicenseClient {
    licenseRegistryClient: LicenseRegistryEventClient;
    licensingModuleClient: LicensingModuleClient;
    ipAssetRegistryClient: IpAssetRegistryClient;
    piLicenseTemplateReadOnlyClient: PiLicenseTemplateReadOnlyClient;
    licenseTemplateClient: PiLicenseTemplateClient;
    royaltyPolicyLAPClient: RoyaltyPolicyLapClient;
    royaltyModuleReadOnlyClient: RoyaltyModuleReadOnlyClient;
    licenseRegistryReadOnlyClient: LicenseRegistryReadOnlyClient;
    private readonly rpcClient;
    private readonly wallet;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient);
    /**
     * Registers new license terms and return the ID of the newly registered license terms.
     * @param request - The request object that contains all data needed to register a license term.
     *   @param request.transferable Indicates whether the license is transferable or not.
     *   @param request.royaltyPolicy The address of the royalty policy contract which required to StoryProtocol in advance.
     *   @param request.mintingFee The fee to be paid when minting a license.
     *   @param request.expiration The expiration period of the license.
     *   @param request.commercialUse Indicates whether the work can be used commercially or not.
     *   @param request.commercialAttribution Whether attribution is required when reproducing the work commercially or not.
     *   @param request.commercializerChecker Commercializers that are allowed to commercially exploit the work. If zero address, then no restrictions is enforced.
     *   @param request.commercializerCheckerData The data to be passed to the commercializer checker contract.
     *   @param request.commercialRevShare Percentage of revenue that must be shared with the licensor.
     *   @param request.commercialRevCeiling The maximum revenue that can be generated from the commercial use of the work.
     *   @param request.derivativesAllowed Indicates whether the licensee can create derivatives of his work or not.
     *   @param request.derivativesAttribution Indicates whether attribution is required for derivatives of the work or not.
     *   @param request.derivativesApproval Indicates whether the licensor must approve derivatives of the work before they can be linked to the licensor IP ID or not.
     *   @param request.derivativesReciprocal Indicates whether the licensee must license derivatives of the work under the same terms or not.
     *   @param request.derivativeRevCeiling The maximum revenue that can be generated from the derivative use of the work.
     *   @param request.currency The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *   @param request.uri The URI of the license terms, which can be used to fetch the offchain license terms.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to an object containing the optional transaction hash, optional transaction encodedTxData and optional license terms Id.
     * @emits LicenseTermsRegistered (licenseTermsId, licenseTemplate, licenseTerms);
     */
    registerPILTerms(request: RegisterPILTermsRequest): Promise<RegisterPILResponse>;
    /**
     * Convenient function to register a PIL non commercial social remix license to the registry
     * @param request - [Optional] The request object that contains all data needed to register a PIL non commercial social remix license.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to an object containing the optional transaction hash and optional license terms Id.
     * @emits LicenseTermsRegistered (licenseTermsId, licenseTemplate, licenseTerms);
     */
    registerNonComSocialRemixingPIL(request?: RegisterNonComSocialRemixingPILRequest): Promise<RegisterPILResponse>;
    /**
     * Convenient function to register a PIL commercial use license to the registry.
     * @param request - The request object that contains all data needed to register a PIL commercial use license.
     *   @param request.defaultMintingFee The fee to be paid when minting a license.
     *   @param request.currency The ERC20 token to be used to pay the minting fee and the token must be registered in story protocol.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to an object containing the optional transaction hash and optional license terms Id.
     * @emits LicenseTermsRegistered (licenseTermsId, licenseTemplate, licenseTerms);
     */
    registerCommercialUsePIL(request: RegisterCommercialUsePILRequest): Promise<RegisterPILResponse>;
    /**
     * Convenient function to register a PIL commercial Remix license to the registry.
     * @param request - The request object that contains all data needed to register license.
     *   @param request.defaultMintingFee The fee to be paid when minting a license.
     *   @param request.commercialRevShare Percentage of revenue that must be shared with the licensor.
     *   @param request.currency The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to an object containing the optional transaction hash and optional license terms Id.
     * @emits LicenseTermsRegistered (licenseTermsId, licenseTemplate, licenseTerms);
     */
    registerCommercialRemixPIL(request: RegisterCommercialRemixPILRequest): Promise<RegisterPILResponse>;
    /**
     * Attaches license terms to an IP.
     * @param request - The request object that contains all data needed to attach license terms.
     *   @param request.ipId The address of the IP to which the license terms are attached.
     *   @param request.licenseTemplate The address of the license template.
     *   @param request.licenseTermsId The ID of the license terms.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to an object containing the transaction hash.
     */
    attachLicenseTerms(request: AttachLicenseTermsRequest): Promise<AttachLicenseTermsResponse>;
    /**
     * Mints license tokens for the license terms attached to an IP.
     * The license tokens are minted to the receiver.
     * The license terms must be attached to the IP before calling this function.
     * But it can mint license token of default license terms without attaching the default license terms,
     * since it is attached to all IPs by default.
     * IP owners can mint license tokens for their IPs for arbitrary license terms
     * without attaching the license terms to IP.
     * It might require the caller pay the minting fee, depending on the license terms or configured by the iP owner.
     * The minting fee is paid in the minting fee token specified in the license terms or configured by the IP owner.
     * IP owners can configure the minting fee of their IPs or
     * configure the minting fee module to determine the minting fee.
     * @param request - The request object that contains all data needed to mint license tokens.
     *   @param request.licensorIpId The licensor IP ID.
     *   @param request.licenseTemplate The address of the license template.
     *   @param request.licenseTermsId The ID of the license terms within the license template.
     *   @param request.amount The amount of license tokens to mint.
     *   @param request.receiver The address of the receiver.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to an object containing the transaction hash and optional license token IDs if waitForTxn is set to true.
     * @emits LicenseTokensMinted (msg.sender, licensorIpId, licenseTemplate, licenseTermsId, amount, receiver, startLicenseTokenId);
     */
    mintLicenseTokens(request: MintLicenseTokensRequest): Promise<MintLicenseTokensResponse>;
    /**
     * Gets license terms of the given ID.
     * @param selectedLicenseTermsId The ID of the license terms.
     * @returns A Promise that resolves to an object containing the PILTerms associate with the given ID.
     */
    getLicenseTerms(selectedLicenseTermsId: LicenseTermsId): Promise<PiLicenseTemplateGetLicenseTermsResponse>;
    private getLicenseTermsId;
    private verifyCommercialUse;
    private verifyDerivatives;
}
//# sourceMappingURL=license.d.ts.map