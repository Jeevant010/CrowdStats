import { GenerateCreatorMetadataParam, IpCreator, GenerateIpMetadataParam, IpMetadata, RegisterRequest, RegisterIpResponse, RegisterDerivativeRequest, RegisterDerivativeResponse, RegisterDerivativeWithLicenseTokensRequest, RegisterDerivativeWithLicenseTokensResponse, CreateIpAssetWithPilTermsRequest, CreateIpAssetWithPilTermsResponse, RegisterIpAndAttachPilTermsRequest, RegisterIpAndAttachPilTermsResponse, RegisterIpAndMakeDerivativeRequest, RegisterIpAndMakeDerivativeResponse, MintAndRegisterIpAndMakeDerivativeRequest } from "@story-protocol/core-sdk";
declare const useIpAsset: () => {
    loadings: Record<string, boolean>;
    errors: Record<string, string | null>;
    generateCreatorMetadata: (param: GenerateCreatorMetadataParam) => IpCreator;
    generateIpMetadata: (param: GenerateIpMetadataParam) => IpMetadata;
    register: (request: RegisterRequest) => Promise<RegisterIpResponse>;
    registerDerivative: (request: RegisterDerivativeRequest) => Promise<RegisterDerivativeResponse>;
    registerDerivativeWithLicenseTokens: (request: RegisterDerivativeWithLicenseTokensRequest) => Promise<RegisterDerivativeWithLicenseTokensResponse>;
    mintAndRegisterIpAssetWithPilTerms: (request: CreateIpAssetWithPilTermsRequest) => Promise<CreateIpAssetWithPilTermsResponse>;
    registerIpAndAttachPilTerms: (request: RegisterIpAndAttachPilTermsRequest) => Promise<RegisterIpAndAttachPilTermsResponse>;
    registerDerivativeIp: (request: RegisterIpAndMakeDerivativeRequest) => Promise<RegisterIpAndMakeDerivativeResponse>;
    mintAndRegisterIpAndMakeDerivative: (request: MintAndRegisterIpAndMakeDerivativeRequest) => Promise<RegisterDerivativeResponse>;
};
export default useIpAsset;
//# sourceMappingURL=useIpAsset.d.ts.map